<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SpiderBlog</title>
  
  <subtitle>一个专注于分享爬虫实践相关的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://spiderblog.cn/"/>
  <updated>2020-03-22T11:31:25.294Z</updated>
  <id>http://spiderblog.cn/</id>
  
  <author>
    <name>Mr.Zhou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shell</title>
    <link href="http://spiderblog.cn/Shell.html"/>
    <id>http://spiderblog.cn/Shell.html</id>
    <published>2020-03-20T12:10:58.000Z</published>
    <updated>2020-03-22T11:31:25.294Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Shell脚本格式"><a href="#Shell脚本格式" class="headerlink" title="Shell脚本格式"></a>Shell脚本格式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash   开头指定解释器</span></span><br></pre></td></tr></table></figure><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 输出</span><br><span class="line">echo &#39;Hello World...&#39;</span><br><span class="line">source 配置文件  # 让修改后的配置信息立即生效</span><br><span class="line"># chmod 744 myshell.sh  # 授权</span><br></pre></td></tr></table></figure><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 系统变量</span><br><span class="line">env命令 可以查看系统全局变量</span><br><span class="line">printenv命令 查看指定环境变量的值 等价于$USER</span><br><span class="line">例子 $HOME $PWD $SHELL $USER</span><br><span class="line"># 用户自定义变量</span><br><span class="line">声明是 echo $A # 可以直接定义,不声明</span><br><span class="line">A&#x3D;100  # 定义  如果变量值有空格时，必须加双引号。</span><br><span class="line">使用是 B&#x3D;$A  # 定义静态变量：readonly A&#x3D;90 但是不能unset  </span><br><span class="line">unset a  # 删除变量 在unset引用变量名时，不要加$。</span><br><span class="line"># set 显示当前shell中所有变量</span><br><span class="line"># 变量一般为大写，等号左右不能有空格</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建全局变量的方法是先创建一个局部变量,然后导出到全局环境中</span><br><span class="line">export A</span><br><span class="line">在子shell中修改全局变量并不会影响到父shell中该变量的值。</span><br></pre></td></tr></table></figure><h5 id="将命令结果赋值给变量"><a href="#将命令结果赋值给变量" class="headerlink" title="将命令结果赋值给变量"></a>将命令结果赋值给变量</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A&#x3D;$(ls -a)  等价于 A&#x3D;&#96;ls -a&#96;  # 反引号</span><br></pre></td></tr></table></figure><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 单行注释</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 多行注释如下</span></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">语句</span><br><span class="line">!</span><br></pre></td></tr></table></figure><h5 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法有$n和$*和$@和$#和$&#123;10&#125;</span><br><span class="line">$$ 当前进程PID</span><br><span class="line">$! 后台运行的最后一个进程的PID</span><br><span class="line">$? 最后一次执行的命令的返回状态,0正确，非零执行不正确</span><br></pre></td></tr></table></figure><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">((运算式))和$[运算式]  # 推荐使用$[运算式]  # 没有expr</span><br><span class="line"># expr m + n  # 可以 + - \* &#x2F; % 加 减 乘 除 取余</span><br></pre></td></tr></table></figure><h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 基本语法和格式</span></span><br><span class="line">[ condition ]（注意 condition 前后要有空格）</span><br><span class="line">非空返回 true，可使用$?验证（结果为：0 为 true，&gt;1 为 false）</span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用判断条件（左右两边有空格）</span></span><br><span class="line">= 字符串比较</span><br><span class="line">-lt 小于</span><br><span class="line">-le 小于等于</span><br><span class="line">-eq 等于</span><br><span class="line">-gt 大于</span><br><span class="line">-ge 大于等于</span><br><span class="line">-ne 不等于</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照文件权限进行判断</span></span><br><span class="line">-r 有读的权限 [ -r 文件 ]</span><br><span class="line">-w 有写的权限</span><br><span class="line">-x 有执行的权限</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照文件类型进行判断  <span class="comment"># 例子 [ -e /root/a.txt ]</span></span></span><br><span class="line">-f 文件存在并且是一个常规的文件</span><br><span class="line">-e 文件存在</span><br><span class="line">-d 文件存在并是一个目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">if</span> 格式</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">if [ "str" = "s1tr" ]</span><br><span class="line">then</span><br><span class="line">    echo "str equal"</span><br><span class="line">elif [ 100 = 101 ]</span><br><span class="line">then</span><br><span class="line">    echo "100 equal"</span><br><span class="line">elif [ "str1" = "str1" ]</span><br><span class="line">then</span><br><span class="line">    echo "str1 equal"</span><br><span class="line">if [ 123 = 123 ]</span><br><span class="line">    then</span><br><span class="line">        echo "123 equal"</span><br><span class="line">    else</span><br><span class="line">        echo "123 not equal"</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">case</span>语句</span></span><br><span class="line">case $变量名 in </span><br><span class="line">    "值1")</span><br><span class="line">        语句</span><br><span class="line">        ;;</span><br><span class="line">    "值2")</span><br><span class="line">        语句</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        语句</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> 语句</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 实例1</span></span><br><span class="line">for i in 1 2 3 4  # 1 2 3 4 可以替换为 "$*"和"$@"</span><br><span class="line">do</span><br><span class="line">   echo "$i"</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> 实例2</span></span><br><span class="line">for((i=1;i&lt;=100;i++))</span><br><span class="line">do</span><br><span class="line">    echo "$i"</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">while</span> 语句</span></span><br><span class="line">i=1</span><br><span class="line">while [ $i -le 10 ]</span><br><span class="line">do </span><br><span class="line">    echo "num=$i"</span><br><span class="line">    i=$[$i+1]  # 加一</span><br><span class="line">    let i=$i+1 # 加一   # let ：用来执行算数运算和数值表达式测试</span><br><span class="line">    let i++    # 加一   # let 命令的替代表示形式是 ((算术表达式))</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h5 id="控制台输入"><a href="#控制台输入" class="headerlink" title="控制台输入"></a>控制台输入</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read -p "请输入一个数num1=" -t 10 NUM1  # -p 为提示符 -t 是等待时间</span><br></pre></td></tr></table></figure><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 系统函数</span></span><br><span class="line">basename [string] [suffix] # 返回文件名</span><br><span class="line">suffix 为后缀，如果 suffix 被指定了，basename 会将 string 中的 suffix 去掉。</span><br><span class="line"><span class="meta">#</span><span class="bash"> 系统函数</span></span><br><span class="line">dirname 文件绝对路径  # 返回目录</span><br><span class="line">返回完整路径最后'/'的前面的部分，常用于返回路径部分</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 自定义函数</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">function get_sum()&#123;</span><br><span class="line">    local sum=0  #局部变量</span><br><span class="line">    sum=$[$sum+$1+$2]</span><br><span class="line">    echo $sum</span><br><span class="line">    return $?</span><br><span class="line">&#125;</span><br><span class="line">m=100</span><br><span class="line">n=200</span><br><span class="line">total=$(get_sum $m $n)</span><br><span class="line">echo "The sum is $total"</span><br></pre></td></tr></table></figure><h5 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim命令</span><br><span class="line">set tabstop=4</span><br><span class="line">set nu</span><br><span class="line">set nonu</span><br><span class="line">G</span><br><span class="line">gg</span><br><span class="line">u # 撤销</span><br><span class="line">shift+g</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Shell脚本格式&quot;&gt;&lt;a href=&quot;#Shell脚本格式&quot; class=&quot;headerlink&quot; title=&quot;Shell脚本格式&quot;&gt;&lt;/a&gt;Shell脚本格式&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="Shell" scheme="http://spiderblog.cn/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://spiderblog.cn/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux-1</title>
    <link href="http://spiderblog.cn/Linux-1.html"/>
    <id>http://spiderblog.cn/Linux-1.html</id>
    <published>2020-03-17T17:16:17.000Z</published>
    <updated>2020-03-18T11:40:50.810Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Linux复习笔记"><a href="#Linux复习笔记" class="headerlink" title="Linux复习笔记"></a>Linux复习笔记</h4><h5 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 1.添加用户</span><br><span class="line">useradd xm</span><br><span class="line">useradd -d &#x2F;home&#x2F;xm xm  # 指定家目录</span><br><span class="line">useradd -g gxm xm  # 指定用户组gxm</span><br><span class="line"># 2.密码</span><br><span class="line">passwd xm</span><br><span class="line"># 3.删除用户</span><br><span class="line">userdel xm</span><br><span class="line">userdel -r xm  # 删除家目录</span><br><span class="line"># 4.查询用户信息</span><br><span class="line">id xm</span><br><span class="line"># 5.切换用户</span><br><span class="line">su xm</span><br><span class="line">exit  # 退回原来的用户</span><br><span class="line"># 6.修改用户的组</span><br><span class="line">usermod -g gxm xm</span><br><span class="line"># 7.修改用户家目录</span><br><span class="line">usermod -d &#x2F;home&#x2F;xm xm</span><br></pre></td></tr></table></figure><h5 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 1.添加用户组</span><br><span class="line">groupadd xm</span><br><span class="line"># 2.删除用户组</span><br><span class="line">groupdel xm</span><br></pre></td></tr></table></figure><h5 id="用户相关文件"><a href="#用户相关文件" class="headerlink" title="用户相关文件"></a>用户相关文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 用户的配置文件，记录用户的各种信息（用户名，用户id，组id，家目录，shell）</span><br><span class="line">&#x2F;etc&#x2F;passwd</span><br><span class="line"># 密码的配置文件（登录名:加密口令:最后修改时间:最小间隔:最大间隔:警告时间:不活动时间:失效时间:标志）</span><br><span class="line">&#x2F;etc&#x2F;shadow</span><br><span class="line"># 组的配置文件（组名，组id）</span><br><span class="line">&#x2F;etc&#x2F;group</span><br></pre></td></tr></table></figure><h5 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chown xm a.txt  # 修改所属用户 </span><br><span class="line">chgrp gxm a.txt  # 修改所属组</span><br><span class="line">chown xm:gxm a.txt  # 同时修改（特殊用法）</span><br><span class="line">-R  递归生效</span><br><span class="line"># 修改文件权限 u g o a 可以 +- rwx</span><br><span class="line">chmod o-x a.txt</span><br><span class="line">chmod 421 a.txt # r-- -w- --x</span><br></pre></td></tr></table></figure><h5 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /etc/crontab  <span class="comment"># 服务名为 crond  </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl restart crond</span></span><br><span class="line">crontab  </span><br><span class="line">-e 编辑  # 格式*/1 8,12 * * 0-7 ll /root &gt;&gt; /root/to.log  # *和,和-和*/n</span><br><span class="line">        # 格式 * * * * * /home/mytask1.sh # 直接跟shell脚本 # 要注意执行权限</span><br><span class="line">-l 查询</span><br><span class="line">-r 删除当前用户所有的crontab任务</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Linux复习笔记&quot;&gt;&lt;a href=&quot;#Linux复习笔记&quot; class=&quot;headerlink&quot; title=&quot;Linux复习笔记&quot;&gt;&lt;/a&gt;Linux复习笔记&lt;/h4&gt;&lt;h5 id=&quot;用户管理&quot;&gt;&lt;a href=&quot;#用户管理&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Pip</title>
    <link href="http://spiderblog.cn/Pip.html"/>
    <id>http://spiderblog.cn/Pip.html</id>
    <published>2020-03-17T08:00:09.000Z</published>
    <updated>2020-03-17T08:02:10.198Z</updated>
    
    <content type="html"><![CDATA[<h4 id="设置pip源"><a href="#设置pip源" class="headerlink" title="设置pip源"></a>设置pip源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd  # 回到家目录</span><br><span class="line">mkdir .pip</span><br><span class="line">vim .pip&#x2F;pip.conf</span><br><span class="line">写入如下内容</span><br><span class="line">[global]</span><br><span class="line">timeout &#x3D; 6000</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span><br><span class="line">trusted-host &#x3D; pypi.douban.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;设置pip源&quot;&gt;&lt;a href=&quot;#设置pip源&quot; class=&quot;headerlink&quot; title=&quot;设置pip源&quot;&gt;&lt;/a&gt;设置pip源&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
    
      <category term="Pip" scheme="http://spiderblog.cn/categories/Pip/"/>
    
    
      <category term="Pip" scheme="http://spiderblog.cn/tags/Pip/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy-redis</title>
    <link href="http://spiderblog.cn/Scrapy-redis.html"/>
    <id>http://spiderblog.cn/Scrapy-redis.html</id>
    <published>2020-03-16T20:37:23.000Z</published>
    <updated>2020-03-16T22:13:15.020Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Scrapy-redis"><a href="#Scrapy-redis" class="headerlink" title="Scrapy-redis"></a>Scrapy-redis</h4><h5 id="setting"><a href="#setting" class="headerlink" title="setting"></a>setting</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用调度redis中的存储请求队列</span></span><br><span class="line">SCHEDULER = <span class="string">"scrapy_redis.scheduler.Scheduler"</span></span><br><span class="line"><span class="comment"># 确保所有蜘蛛通过redis共享同一个过滤器。</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">"scrapy_redis.dupefilter.RFPDupeFilter"</span></span><br><span class="line"><span class="comment"># 不清理redis队列，允许暂停/恢复爬网。</span></span><br><span class="line">SCHEDULER_PERSIST = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 使用优先级队列调度请求。（默认）</span></span><br><span class="line">SCHEDULER_QUEUE_CLASS = <span class="string">'scrapy_redis.queue.PriorityQueue'</span></span><br><span class="line"><span class="comment"># 备用队列。</span></span><br><span class="line">SCHEDULER_QUEUE_CLASS = <span class="string">'scrapy_redis.queue.FifoQueue'</span></span><br><span class="line">SCHEDULER_QUEUE_CLASS = <span class="string">'scrapy_redis.queue.LifoQueue'</span></span><br><span class="line"><span class="comment"># 防止蜘蛛在分布式爬网时关闭的最大空闲时间。这仅在队列类为SpiderQueue或SpiderStack时有效，并且在蜘蛛第一次启动时也可能会阻止这么长的时间（因为队列为空）。</span></span><br><span class="line">SCHEDULER_IDLE_BEFORE_CLOSE = <span class="number">10</span></span><br><span class="line"><span class="comment"># 将爬取的item存储在redis数据库中</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'scrapy_redis.pipelines.RedisPipeline'</span>: <span class="number">300</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 存储item的redis的key</span></span><br><span class="line">REDIS_ITEMS_KEY = <span class="string">'%(spider)s:items'</span></span><br><span class="line"><span class="comment"># 默认情况下，item的序列化程序是ScrapyJSONEncoder。</span></span><br><span class="line">REDIS_ITEMS_SERIALIZER = <span class="string">'json.dumps'</span></span><br><span class="line"><span class="comment"># 连接Redis时，使用的主机和端口（可选）。</span></span><br><span class="line">REDIS_HOST = <span class="string">'localhost'</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br><span class="line"><span class="comment"># 指定用于连接Redis的完整URL（可选）。</span></span><br><span class="line"><span class="comment"># 如果设置，它将优先于REDIS_HOST和REDIS_PORT设置。</span></span><br><span class="line">REDIS_URL = <span class="string">'redis://user:pass@hostname:9001'</span></span><br><span class="line"><span class="comment"># 自定义Redis客户端参数（即：套接字超时等）</span></span><br><span class="line">REDIS_PARAMS  = &#123;&#125;</span><br><span class="line"><span class="comment"># 是否对初始urls去重，默认False，为不去重</span></span><br><span class="line">REDIS_START_URLS_AS_SET = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 获取起始URL默认的redis key。</span></span><br><span class="line">REDIS_START_URLS_KEY = <span class="string">'%(name)s:start_urls'</span></span><br><span class="line"><span class="comment"># 使用utf-8以外的其他编码对redis进行编码，默认是utf-8</span></span><br><span class="line"><span class="comment"># REDIS_ENCODING = 'latin1'</span></span><br></pre></td></tr></table></figure><h5 id="spider编写"><a href="#spider编写" class="headerlink" title="spider编写"></a>spider编写</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(RedisSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'myspider'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># do stuff</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h5 id="启动spider"><a href="#启动spider" class="headerlink" title="启动spider"></a>启动spider</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. run the spider:</span></span><br><span class="line">scrapy runspider myspider.py</span><br><span class="line"><span class="comment"># 2. push urls to redis:</span></span><br><span class="line">redis-cli lpush myspider:start_urls http://google.com</span><br><span class="line"><span class="comment"># 两者先后顺序不重要，因为 SCHEDULER_IDLE_BEFORE_CLOSE = 10 会等待</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Scrapy-redis&quot;&gt;&lt;a href=&quot;#Scrapy-redis&quot; class=&quot;headerlink&quot; title=&quot;Scrapy-redis&quot;&gt;&lt;/a&gt;Scrapy-redis&lt;/h4&gt;&lt;h5 id=&quot;setting&quot;&gt;&lt;a href=&quot;#settin
      
    
    </summary>
    
    
      <category term="Scrapy-redis" scheme="http://spiderblog.cn/categories/Scrapy-redis/"/>
    
    
      <category term="Scrapy-redis" scheme="http://spiderblog.cn/tags/Scrapy-redis/"/>
    
  </entry>
  
  <entry>
    <title>CSV</title>
    <link href="http://spiderblog.cn/CSV.html"/>
    <id>http://spiderblog.cn/CSV.html</id>
    <published>2020-03-16T17:16:00.000Z</published>
    <updated>2020-03-16T20:04:48.662Z</updated>
    
    <content type="html"><![CDATA[<h4 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'test.csv'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8-sig'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">','</span>.join(test_list) + <span class="string">'\n'</span>)</span><br><span class="line"><span class="comment"># 使用utf-8-sig，避免格式错误</span></span><br><span class="line"><span class="comment"># csv是使用","来实现分隔吗,要注意输入值含有逗号会出现结果异常</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;CSV&quot;&gt;&lt;a href=&quot;#CSV&quot; class=&quot;headerlink&quot; title=&quot;CSV&quot;&gt;&lt;/a&gt;CSV&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="CSV" scheme="http://spiderblog.cn/categories/CSV/"/>
    
    
      <category term="CSV" scheme="http://spiderblog.cn/tags/CSV/"/>
    
  </entry>
  
  <entry>
    <title>Email</title>
    <link href="http://spiderblog.cn/Email.html"/>
    <id>http://spiderblog.cn/Email.html</id>
    <published>2020-03-01T19:58:14.000Z</published>
    <updated>2020-03-01T19:59:06.206Z</updated>
    
    <content type="html"><![CDATA[<h4 id="发送邮件，带附件"><a href="#发送邮件，带附件" class="headerlink" title="发送邮件，带附件"></a>发送邮件，带附件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email <span class="keyword">import</span> encoders</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.base <span class="keyword">import</span> MIMEBase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_email</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 邮件一般是由标题，发信人，收件人，邮件内容，附件等构成</span></span><br><span class="line">    msg = MIMEMultipart()</span><br><span class="line">    msg[<span class="string">'From'</span>] = Header(<span class="string">'Worker&lt;1837722596@qq.com&gt;'</span>)  <span class="comment"># 发件人</span></span><br><span class="line">    msg[<span class="string">'To'</span>] = Header(<span class="string">'Administrators&lt;17859717522@163.com&gt;'</span>)  <span class="comment"># 收件人</span></span><br><span class="line">    msg[<span class="string">'Subject'</span>] = Header(<span class="string">'Work in 2020.'</span>, <span class="string">'utf-8'</span>).encode()  <span class="comment"># 标题</span></span><br><span class="line">    msg.attach(MIMEText(<span class="string">'hello, work completed.'</span>, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>))  <span class="comment"># 内容</span></span><br><span class="line"></span><br><span class="line">    zip_path = os.path.join(os.path.abspath(<span class="string">'.'</span>), <span class="string">'test.zip'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(zip_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        mime = MIMEBase(<span class="string">'zip'</span>, <span class="string">'zip'</span>, filename=zip_path)</span><br><span class="line">        <span class="comment"># 加上必要的头信息:</span></span><br><span class="line">        mime.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=(<span class="string">'utf8'</span>, <span class="string">''</span>, <span class="string">'test1.zip'</span>))</span><br><span class="line">        mime.add_header(<span class="string">'Content-ID'</span>, <span class="string">'&lt;0&gt;'</span>)</span><br><span class="line">        mime.add_header(<span class="string">'X-Attachment-Id'</span>, <span class="string">'0'</span>)</span><br><span class="line">        <span class="comment"># 把附件的内容读进来:</span></span><br><span class="line">        mime.set_payload(f.read())</span><br><span class="line">    encoders.encode_base64(mime)</span><br><span class="line">    msg.attach(mime)</span><br><span class="line"></span><br><span class="line">    server = smtplib.SMTP(<span class="string">"smtp.qq.com"</span>, <span class="number">25</span>)</span><br><span class="line">    server.starttls()  <span class="comment"># 加密</span></span><br><span class="line">    server.login(<span class="string">"1837722596@qq.com"</span>, <span class="string">"gphfapcvqmjubeje"</span>)  <span class="comment"># 授权码</span></span><br><span class="line">    server.sendmail(<span class="string">"1837722596@qq.com"</span>, [<span class="string">"17859717522@163.com"</span>, ], msg.as_string())</span><br><span class="line">    server.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    send_email()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;发送邮件，带附件&quot;&gt;&lt;a href=&quot;#发送邮件，带附件&quot; class=&quot;headerlink&quot; title=&quot;发送邮件，带附件&quot;&gt;&lt;/a&gt;发送邮件，带附件&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="Python" scheme="http://spiderblog.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://spiderblog.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>PEP8</title>
    <link href="http://spiderblog.cn/PEP8.html"/>
    <id>http://spiderblog.cn/PEP8.html</id>
    <published>2020-02-23T13:48:46.000Z</published>
    <updated>2020-02-23T14:03:22.154Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TODO 表示需要做而未做的一些待完成的事项，有助于事后的检索，以及对整体项目做进一步的修改迭代。</span><br><span class="line"><span class="comment"># 规范例子如下:</span></span><br><span class="line"><span class="comment"># TODO(worder_name): [2020-02-23, 2020-02-28] Explain what to do.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TODO&quot;&gt;&lt;a href=&quot;#TODO&quot; class=&quot;headerlink&quot; title=&quot;TODO&quot;&gt;&lt;/a&gt;TODO&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="PEP8" scheme="http://spiderblog.cn/categories/PEP8/"/>
    
    
      <category term="PEP8" scheme="http://spiderblog.cn/tags/PEP8/"/>
    
  </entry>
  
  <entry>
    <title>Logging</title>
    <link href="http://spiderblog.cn/Logging.html"/>
    <id>http://spiderblog.cn/Logging.html</id>
    <published>2020-02-22T18:25:02.000Z</published>
    <updated>2020-02-22T19:13:41.409Z</updated>
    
    <content type="html"><![CDATA[<h4 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.debug(<span class="string">"Hello"</span>)</span><br><span class="line">logging.info(<span class="string">"Hello"</span>)</span><br><span class="line">logging.warning(<span class="string">"Hello"</span>) <span class="comment"># 默认</span></span><br><span class="line">logging.error(<span class="string">"Hello"</span>)</span><br><span class="line">logging.critical(<span class="string">"Hello"</span>)</span><br></pre></td></tr></table></figure><h4 id="控制级别"><a href="#控制级别" class="headerlink" title="控制级别"></a>控制级别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.NOTSET)  <span class="comment"># 设置日志级别</span></span><br></pre></td></tr></table></figure><h4 id="控制日志格式"><a href="#控制日志格式" class="headerlink" title="控制日志格式"></a>控制日志格式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logging.basicConfig(level=logging.DEBUG,</span><br><span class="line">             format=<span class="string">'[%(levelname)s][%(asctime)s][%(filename)s][%(message)s]'</span>)</span><br><span class="line"><span class="comment"># 推荐格式'[%(levelname)s][%(asctime)s][%(filename)s][%(message)s]'</span></span><br></pre></td></tr></table></figure><h4 id="基本操作流程（经典案例）"><a href="#基本操作流程（经典案例）" class="headerlink" title="基本操作流程（经典案例）"></a>基本操作流程（经典案例）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.DEBUG)  <span class="comment"># 设置为最低</span></span><br><span class="line"></span><br><span class="line">log_dir = os.path.join(os.getcwd(), <span class="string">'Logs'</span>)</span><br><span class="line">log_file = os.path.join(log_dir, <span class="string">'spider_error.log'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_dir):</span><br><span class="line">    os.mkdir(log_dir)</span><br><span class="line"></span><br><span class="line">file_handler = logging.FileHandler(log_file, mode=<span class="string">'a'</span>)  <span class="comment"># 日志文件</span></span><br><span class="line">file_handler.setLevel(logging.ERROR)</span><br><span class="line">file_handler.setFormatter(logging.Formatter(<span class="string">'[%(levelname)s][%(asctime)s][%(message)s]'</span>))</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line">console_handler = logging.StreamHandler()  <span class="comment"># 控制台</span></span><br><span class="line">console_handler.setLevel(logging.INFO)</span><br><span class="line">console_handler.setFormatter(logging.Formatter(<span class="string">'[%(levelname)s][%(asctime)s][%(message)s]'</span>))</span><br><span class="line">logger.addHandler(console_handler)</span><br><span class="line"><span class="comment"># 所有日志都到logger里面,需要输出到哪里，就过滤，拷贝到哪里。</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/CJOKER/p/8295272.html" target="_blank" rel="external nofollow noopener noreferrer">logging参考连接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;日志级别&quot;&gt;&lt;a href=&quot;#日志级别&quot; class=&quot;headerlink&quot; title=&quot;日志级别&quot;&gt;&lt;/a&gt;日志级别&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="Python" scheme="http://spiderblog.cn/categories/Python/"/>
    
    
      <category term="Python" scheme="http://spiderblog.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://spiderblog.cn/Git.html"/>
    <id>http://spiderblog.cn/Git.html</id>
    <published>2020-02-22T17:26:32.000Z</published>
    <updated>2020-02-22T16:49:25.479Z</updated>
    
    <content type="html"><![CDATA[<h4 id="查看不同"><a href="#查看不同" class="headerlink" title="查看不同"></a>查看不同</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><h4 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^ </span><br><span class="line"><span class="meta">#</span><span class="bash"> HEAD 表示当前版本，^和^^, 或者直接是版本id号</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 1094a</span><br><span class="line"><span class="meta">#</span><span class="bash"> git reset --hard commit_id</span></span><br></pre></td></tr></table></figure><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log [--pretty=oneline]</span><br><span class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">log</span> --graph命令可以看到分支合并图</span></span><br><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><h4 id="查看历史命令"><a href="#查看历史命令" class="headerlink" title="查看历史命令"></a>查看历史命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><h4 id="查看工作区和版本库里面最新版本的区别"><a href="#查看工作区和版本库里面最新版本的区别" class="headerlink" title="查看工作区和版本库里面最新版本的区别"></a>查看工作区和版本库里面最新版本的区别</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD -- readme.txt</span><br></pre></td></tr></table></figure><h4 id="丢弃修改"><a href="#丢弃修改" class="headerlink" title="丢弃修改"></a>丢弃修改</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- readme.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> git checkout -- file</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只能丢弃未add的</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果已经add了，则需要使用git reset HEAD &lt;file&gt;命令，再调用git checkout -- readme.txt</span></span><br><span class="line">git reset HEAD readme.txt # 撤销add的文件</span><br><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先删除文件，再使用命令删除版本库里面的文件，并且再commit</span></span><br><span class="line">git rm test.txt</span><br><span class="line">git commit -m "remove test.txt"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果误删则git checkout -- test.txt还原</span></span><br><span class="line">git checkout -- test.txt</span><br></pre></td></tr></table></figure><h4 id="关联仓库"><a href="#关联仓库" class="headerlink" title="关联仓库"></a>关联仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin "url"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把本地库的所有内容推送到远程库上</span></span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</span></span><br></pre></td></tr></table></figure><h4 id="推送代码"><a href="#推送代码" class="headerlink" title="推送代码"></a>推送代码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br><span class="line"><span class="meta">#</span><span class="bash"> master 是仓库</span></span><br></pre></td></tr></table></figure><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建+切换分支</span></span><br><span class="line">git checkout -b dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建分支</span></span><br><span class="line">git branch &lt;name&gt;</span><br></pre></td></tr></table></figure><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;name&gt;</span><br></pre></td></tr></table></figure><h4 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 会列出所有分支，当前分支前面会标一个*号</span></span><br><span class="line">git branch</span><br></pre></td></tr></table></figure><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 分支走在了主分支前面，并没有变成两个不同分支</span></span><br><span class="line">git merge dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> Fast-forward <span class="string">"快进模式"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换回主分支，再合并（重点理解为什么）</span></span><br></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev # 和查看当前分支相同</span><br><span class="line">git branch -D feature-vulcan # 强制删除未合并的分支</span><br></pre></td></tr></table></figure><h4 id="禁用Fast-forward-：”快进模式”"><a href="#禁用Fast-forward-：”快进模式”" class="headerlink" title="禁用Fast-forward ：”快进模式”"></a>禁用Fast-forward ：”快进模式”</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff -m "merge with no-ff" dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</span></span><br></pre></td></tr></table></figure><h4 id="保存现场"><a href="#保存现场" class="headerlink" title="保存现场"></a>保存现场</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看保存的现场</span></span><br><span class="line">git stash list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复现场方法一</span></span><br><span class="line">git stash apply</span><br><span class="line">git stash drop</span><br><span class="line">git stash apply stash@&#123;0&#125; # 好像没什么区别</span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复现场方法二</span></span><br><span class="line">git stash pop # 常用</span><br></pre></td></tr></table></figure><h4 id="查看远程库信息"><a href="#查看远程库信息" class="headerlink" title="查看远程库信息"></a>查看远程库信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote [-v]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 加上-v，信息更详细</span></span><br></pre></td></tr></table></figure><h4 id="分支推送原则"><a href="#分支推送原则" class="headerlink" title="分支推送原则"></a>分支推送原则</h4><ul><li><code>master</code>分支是主分支，因此要时刻与远程同步；</li><li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li><code>bug</code>分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li><code>feature</code>分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul><h4 id="拷贝远程分支到本地（远程合作常用）"><a href="#拷贝远程分支到本地（远程合作常用）" class="headerlink" title="拷贝远程分支到本地（远程合作常用）"></a>拷贝远程分支到本地（远程合作常用）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev origin/dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置dev和origin/dev的链接</span></span><br><span class="line">git branch --set-upstream-to=origin/dev dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> git branch --<span class="built_in">set</span>-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</span></span><br><span class="line">git pull # 下载更新</span><br></pre></td></tr></table></figure><h4 id="特殊命令（多人合作）"><a href="#特殊命令（多人合作）" class="headerlink" title="特殊命令（多人合作）"></a>特殊命令（多人合作）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rebase</span><br><span class="line"><span class="meta">#</span><span class="bash"> rebase操作可以把本地未push的分叉提交历史整理成直线；</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</span></span><br></pre></td></tr></table></figure><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> git tag &lt;name&gt;</span></span><br></pre></td></tr></table></figure><h4 id="对commit打标签"><a href="#对commit打标签" class="headerlink" title="对commit打标签"></a>对commit打标签</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v0.9 f52c633  # id号</span><br></pre></td></tr></table></figure><h4 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git tag # 查看标签</span><br><span class="line">git show v0.9  # git show &lt;tagname&gt;查看标签信息</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意，标签不是按时间顺序列出，而是按字母排序的。</span></span><br><span class="line"></span><br><span class="line">git tag -a v0.1 -m "version 0.1 released" 1094adb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签</span></span><br></pre></td></tr></table></figure><h4 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除标签</span></span><br><span class="line">git tag -d v0.1  # 命令git tag -d &lt;tagname&gt;可以删除一个本地标签；</span><br><span class="line"><span class="meta">#</span><span class="bash"> git push origin &lt;tagname&gt; 推送标签到远程库</span></span><br><span class="line">git push origin v1.0 # 某一个</span><br><span class="line">git push origin --tags  # 所有标签</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除</span></span><br><span class="line">git tag -d v0.9</span><br><span class="line">git push origin :refs/tags/v0.9</span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签。</span></span><br></pre></td></tr></table></figure><h4 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> .gitignore文件（不想被git提示的，文件名写入其中即可）</span></span><br><span class="line">git check-ignore # 查找错误规则</span><br><span class="line">git add -f App.class # 强制添加</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 别名</span></span><br><span class="line">git config --global alias.st status # git status改为git st (即status改为st)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 丧心病狂</span></span><br><span class="line">git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置文件cat .git/config ,直接修改[<span class="built_in">alias</span>]即可还原</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;查看不同&quot;&gt;&lt;a href=&quot;#查看不同&quot; class=&quot;headerlink&quot; title=&quot;查看不同&quot;&gt;&lt;/a&gt;查看不同&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="Git" scheme="http://spiderblog.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="http://spiderblog.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Sorting_algorithm</title>
    <link href="http://spiderblog.cn/Sorting_algorithm.html"/>
    <id>http://spiderblog.cn/Sorting_algorithm.html</id>
    <published>2020-02-22T15:08:11.000Z</published>
    <updated>2020-02-22T16:33:31.038Z</updated>
    
    <content type="html"><![CDATA[<h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><h5 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">稳定：如果a原本在b前面，而a&#x3D;b，排序之后a仍然在b的前面；</span><br><span class="line">不稳定：如果a原本在b的前面，而a&#x3D;b，排序之后a可能会出现在b的后面；</span><br><span class="line">内排序：所有排序操作都在内存中完成；</span><br><span class="line">外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</span><br><span class="line">时间复杂度：一个算法执行所耗费的时间。</span><br><span class="line">空间复杂度：运行完一个程序所需内存的大小。</span><br></pre></td></tr></table></figure><h5 id="算法总结"><a href="#算法总结" class="headerlink" title="算法总结"></a>算法总结</h5><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015233043168-1867817869.png" alt="算法总结.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">图片名词解释</span><br><span class="line">n: 数据规模</span><br><span class="line">k: “桶”的个数</span><br><span class="line">In-place: 占用常数内存，不占用额外内存</span><br><span class="line">Out-place: 占用额外内存</span><br></pre></td></tr></table></figure><h5 id="算法分类"><a href="#算法分类" class="headerlink" title="算法分类"></a>算法分类</h5><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015233220637-1055088118.png" alt="算法分类.png"></p><h3 id="算法详解"><a href="#算法详解" class="headerlink" title="算法详解"></a>算法详解</h3><h5 id="1-冒泡-Bubble-Sort"><a href="#1-冒泡-Bubble-Sort" class="headerlink" title="1. 冒泡 Bubble Sort"></a>1. 冒泡 Bubble Sort</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">相邻两两比较、交换</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(n)   最差情况：T(n) &#x3D; O(n2)   平均情况：T(n) &#x3D; O(n2)</span><br></pre></td></tr></table></figure><h5 id="2-选择排序-Selection-Sort"><a href="#2-选择排序-Selection-Sort" class="headerlink" title="2. 选择排序 Selection Sort"></a>2. 选择排序 Selection Sort</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在未排list中找到最小，放到排序后的list末尾</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(n2)  最差情况：T(n) &#x3D; O(n2)  平均情况：T(n) &#x3D; O(n2)</span><br></pre></td></tr></table></figure><h5 id="3-插入排序-Insertion-Sort"><a href="#3-插入排序-Insertion-Sort" class="headerlink" title="3. 插入排序 Insertion Sort"></a>3. 插入排序 Insertion Sort</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将未排序的list，一个一个插入到已排序的list中</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(n)   最坏情况：T(n) &#x3D; O(n2)   平均情况：T(n) &#x3D; O(n2)</span><br></pre></td></tr></table></figure><h5 id="4-希尔排序-Shell-Sort"><a href="#4-希尔排序-Shell-Sort" class="headerlink" title="4. 希尔排序 Shell Sort"></a>4. 希尔排序 Shell Sort</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">插入排序的变种：定义增量，以增量为间隔，进行插入排序，逐渐减小增量</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(nlog2 n)  最坏情况：T(n) &#x3D; O(nlog2 n)  平均情况：T(n) &#x3D;O(nlog n)</span><br></pre></td></tr></table></figure><h5 id="5-归并排序-Merge-Sort"><a href="#5-归并排序-Merge-Sort" class="headerlink" title="5. 归并排序 Merge Sort"></a>5. 归并排序 Merge Sort</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将list不断分为两个子序列，直到只有1个或者2个元素（递归）</span><br><span class="line">将两个排序好的子序列合并成一个最终的排序序列（返回值）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(n)  最差情况：T(n) &#x3D; O(nlogn)  平均情况：T(n) &#x3D; O(nlogn)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="comment"># divide to two</span></span><br><span class="line">    <span class="keyword">if</span> len(arr) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    mid = int(len(arr)/<span class="number">2</span>)</span><br><span class="line">    left = merge_sort(arr[:mid])</span><br><span class="line">    right = merge_sort(arr[mid:])</span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(left) <span class="keyword">and</span> j &lt; len(right):</span><br><span class="line">        <span class="keyword">if</span> left[i] &lt; right[j]:</span><br><span class="line">            result.append(left[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="comment"># add the larger part both left and right</span></span><br><span class="line">    result += left[i:]</span><br><span class="line">    result += right[j:]</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h5 id="6-快速排序-Quick-Sort"><a href="#6-快速排序-Quick-Sort" class="headerlink" title="6. 快速排序 Quick Sort"></a>6. 快速排序 Quick Sort</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个基准，左边list小于或等于基准，右边list大于list</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(nlogn)   最差情况：T(n) &#x3D; O(n2)   平均情况：T(n) &#x3D; O(nlogn)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qucik_sort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(alist) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> alist</span><br><span class="line">    <span class="keyword">return</span> qucik_sort([i <span class="keyword">for</span> i <span class="keyword">in</span> alist[<span class="number">1</span>:] <span class="keyword">if</span> i &lt; alist[<span class="number">0</span>]]) + alist[<span class="number">0</span>:<span class="number">1</span>] + qucik_sort([i <span class="keyword">for</span> i <span class="keyword">in</span> alist[<span class="number">1</span>:] <span class="keyword">if</span> i &gt;= alist[<span class="number">0</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一行快排</span><br><span class="line">def qs(a): return qs([i for i in a[1:] if i &lt;&#x3D; a[0]]) + a[0:1] + qs([i for i in a[1:] if i &gt; a[0]]) if len(a) &gt; 1 else a</span><br></pre></td></tr></table></figure><h5 id="7-堆排序-Heap-Sort"><a href="#7-堆排序-Heap-Sort" class="headerlink" title="7. 堆排序 Heap Sort"></a>7. 堆排序 Heap Sort</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_40596016&#x2F;article&#x2F;details&#x2F;79711682</span><br></pre></td></tr></table></figure><h5 id="8-计数排序-Counting-Sort"><a href="#8-计数排序-Counting-Sort" class="headerlink" title="8. 计数排序 Counting Sort"></a>8. 计数排序 Counting Sort</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">它只能对整数进行排序</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(n+k)  最差情况：T(n) &#x3D; O(n+k)  平均情况：T(n) &#x3D; O(n+k)</span><br></pre></td></tr></table></figure><h5 id="9-桶排序-Bucket-Sort"><a href="#9-桶排序-Bucket-Sort" class="headerlink" title="9. 桶排序 Bucket Sort"></a>9. 桶排序 Bucket Sort</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">桶排序是计数排序的升级版</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(n+k)   最差情况：T(n) &#x3D; O(n+k)   平均情况：T(n) &#x3D; O(n2)</span><br></pre></td></tr></table></figure><h5 id="10-基数排序-Radix-Sort"><a href="#10-基数排序-Radix-Sort" class="headerlink" title="10. 基数排序 Radix Sort"></a>10. 基数排序 Radix Sort</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(n * k)   最差情况：T(n) &#x3D; O(n * k)   平均情况：T(n) &#x3D; O(n * k)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;排序算法&quot;&gt;&lt;a href=&quot;#排序算法&quot; class=&quot;headerlink&quot; title=&quot;排序算法&quot;&gt;&lt;/a&gt;排序算法&lt;/h3&gt;&lt;h5 id=&quot;术语&quot;&gt;&lt;a href=&quot;#术语&quot; class=&quot;headerlink&quot; title=&quot;术语&quot;&gt;&lt;/a&gt;术语&lt;/h
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://spiderblog.cn/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://spiderblog.cn/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy_shell</title>
    <link href="http://spiderblog.cn/Scrapy_shell.html"/>
    <id>http://spiderblog.cn/Scrapy_shell.html</id>
    <published>2020-02-21T18:08:11.000Z</published>
    <updated>2020-02-22T10:38:35.122Z</updated>
    
    <content type="html"><![CDATA[<h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给scrapy shell 调试加上headers</span></span><br><span class="line">scrapy shell <span class="comment"># 进入shell,但没有url</span></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'User-Agent:Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1'</span>&#125;</span><br><span class="line">req = scrapy.Request(url=<span class="string">'url'</span>,headers=headers)</span><br><span class="line">fetch(req) <span class="comment"># 如此就等价于scrapy shell url # 添加了headers</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;shell&quot;&gt;&lt;a href=&quot;#shell&quot; class=&quot;headerlink&quot; title=&quot;shell&quot;&gt;&lt;/a&gt;shell&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
    
      <category term="Scrapy" scheme="http://spiderblog.cn/categories/Scrapy/"/>
    
    
      <category term="Scrapy" scheme="http://spiderblog.cn/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Xpath</title>
    <link href="http://spiderblog.cn/Xpath.html"/>
    <id>http://spiderblog.cn/Xpath.html</id>
    <published>2020-02-21T18:08:10.000Z</published>
    <updated>2020-02-22T16:42:18.575Z</updated>
    
    <content type="html"><![CDATA[<h4 id="选取节点"><a href="#选取节点" class="headerlink" title="选取节点"></a>选取节点</h4><ul><li>节点是通过沿着路径或者 step 来选取的</li></ul><table><thead><tr><th align="left">表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">node_name</td><td align="left">选取此节点的所有子节点。</td></tr><tr><td align="left">/</td><td align="left">从根节点选取。</td></tr><tr><td align="left">//</td><td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td align="left">.</td><td align="left">选取当前节点。</td></tr><tr><td align="left">..</td><td align="left">选取当前节点的父节点。</td></tr><tr><td align="left">@</td><td align="left"><strong>选取属性。</strong></td></tr></tbody></table><h4 id="谓语"><a href="#谓语" class="headerlink" title="谓语"></a>谓语</h4><ul><li>谓语用来查找某个特定的节点或者包含某个指定的值的节点。</li><li>谓语被嵌在方括号中。</li></ul><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">/bookstore/book[1]</td><td align="left">选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td align="left">/bookstore/book[last()]</td><td align="left">选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td align="left">/bookstore/book[last()-1]</td><td align="left">选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td align="left">/bookstore/book[position()&lt;3]</td><td align="left">选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td align="left">//title[@lang]</td><td align="left">选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td align="left">//title[@lang=’eng’]</td><td align="left">选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td align="left">/bookstore/book[price&gt;35.00]</td><td align="left">选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td align="left">/bookstore/book[price&gt;35.00]/title</td><td align="left">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><h4 id="XPath-通配符"><a href="#XPath-通配符" class="headerlink" title="XPath 通配符"></a>XPath 通配符</h4><table><thead><tr><th align="left">通配符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">匹配任何元素节点。</td></tr><tr><td align="left">@*</td><td align="left">匹配任何属性节点。</td></tr><tr><td align="left">node()</td><td align="left">匹配任何类型的节点。</td></tr></tbody></table><ul><li>通过在路径表达式中使用“|”运算符，您可以选取若干个路径。</li></ul><h4 id="步的语法"><a href="#步的语法" class="headerlink" title="步的语法"></a>步的语法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">轴名称::节点测试[谓语]</span><br></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li>XPath 表达式可返回节点集、字符串、逻辑值以及数字。（与python基本一样）</li></ul><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th><th align="left">返回值</th></tr></thead><tbody><tr><td align="left">|</td><td align="left">计算两个节点集</td><td align="left">//book | //cd</td><td align="left">返回所有拥有 book 和 cd 元素的节点集</td></tr><tr><td align="left">div</td><td align="left">除法</td><td align="left">8 div 4</td><td align="left">2</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;选取节点&quot;&gt;&lt;a href=&quot;#选取节点&quot; class=&quot;headerlink&quot; title=&quot;选取节点&quot;&gt;&lt;/a&gt;选取节点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;节点是通过沿着路径或者 step 来选取的&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;t
      
    
    </summary>
    
    
      <category term="Xpath" scheme="http://spiderblog.cn/categories/Xpath/"/>
    
    
      <category term="Xpath" scheme="http://spiderblog.cn/tags/Xpath/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy_1</title>
    <link href="http://spiderblog.cn/Scrapy-1.html"/>
    <id>http://spiderblog.cn/Scrapy-1.html</id>
    <published>2020-02-16T15:40:32.000Z</published>
    <updated>2020-03-17T15:19:41.348Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令加上参数 --nolog 可以去掉log日志输出</span><br></pre></td></tr></table></figure><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.downloadermiddlewares.retry <span class="keyword">import</span> RetryMiddleware <span class="comment"># 参考这个写即可</span></span><br><span class="line"><span class="comment"># 设置最大等待时间、失败重试次数</span></span><br><span class="line">DOWNLOAD_TIMEOUT = <span class="number">10</span></span><br><span class="line">RETRY_ENABLED = <span class="literal">True</span>  <span class="comment"># 失败重试</span></span><br><span class="line">RETRY_TIMES = <span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="scrapy复习笔记"><a href="#scrapy复习笔记" class="headerlink" title="scrapy复习笔记"></a>scrapy复习笔记</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allowed_domains = [] <span class="comment"># 与OffsiteMiddleware中间件挂钩</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy.FormRequest() <span class="comment"># post请求</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.downloadermiddlewares.retry <span class="keyword">import</span> RetryMiddleware </span><br><span class="line"><span class="comment"># 异常处理，必须看源码，必须对异常进行处理</span></span><br></pre></td></tr></table></figure><h5 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">get()和getall()</span><br><span class="line">get(default&#x3D;&#39;not-found&#39;) #设置默认值</span><br><span class="line">.attrib[&#39;src&#39;]  # 获取属性值，它返回第一个匹配元素的属性</span><br><span class="line">scrapy css特有的::text和::attr(name)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; response.css(&#39;base&#39;).attrib   # 变成dict了</span><br><span class="line">&#123;&#39;href&#39;: &#39;http:&#x2F;&#x2F;example.com&#x2F;&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; response.css(&#39;base&#39;).attrib[&#39;href&#39;]</span><br><span class="line">&#39;http:&#x2F;&#x2F;example.com&#x2F;&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 例子</span><br><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;base&#x2F;@href&#39;).get()</span><br><span class="line">&#39;http:&#x2F;&#x2F;example.com&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; response.css(&#39;base::attr(href)&#39;).get()</span><br><span class="line">&#39;http:&#x2F;&#x2F;example.com&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; response.css(&#39;base&#39;).attrib[&#39;href&#39;]</span><br><span class="line">&#39;http:&#x2F;&#x2F;example.com&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;a[contains(@href, &quot;image&quot;)]&#x2F;@href&#39;).getall()</span><br><span class="line">[&#39;image1.html&#39;,</span><br><span class="line"> &#39;image2.html&#39;,</span><br><span class="line"> &#39;image3.html&#39;,</span><br><span class="line"> &#39;image4.html&#39;,</span><br><span class="line"> &#39;image5.html&#39;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; response.css(&#39;a[href*&#x3D;image]::attr(href)&#39;).getall()</span><br><span class="line">[&#39;image1.html&#39;,</span><br><span class="line"> &#39;image2.html&#39;,</span><br><span class="line"> &#39;image3.html&#39;,</span><br><span class="line"> &#39;image4.html&#39;,</span><br><span class="line"> &#39;image5.html&#39;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;a[contains(@href, &quot;image&quot;)]&#x2F;img&#x2F;@src&#39;).getall()</span><br><span class="line">[&#39;image1_thumb.jpg&#39;,</span><br><span class="line"> &#39;image2_thumb.jpg&#39;,</span><br><span class="line"> &#39;image3_thumb.jpg&#39;,</span><br><span class="line"> &#39;image4_thumb.jpg&#39;,</span><br><span class="line"> &#39;image5_thumb.jpg&#39;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; response.css(&#39;a[href*&#x3D;image] img::attr(src)&#39;).getall()</span><br><span class="line">[&#39;image1_thumb.jpg&#39;,</span><br><span class="line"> &#39;image2_thumb.jpg&#39;,</span><br><span class="line"> &#39;image3_thumb.jpg&#39;,</span><br><span class="line"> &#39;image4_thumb.jpg&#39;,</span><br><span class="line"> &#39;image5_thumb.jpg&#39;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;span&#x2F;text()&#39;).get()</span><br><span class="line">&#39;good&#39;</span><br><span class="line">&gt;&gt;&gt; response.css(&#39;span::text&#39;).get()</span><br><span class="line">&#39;good&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Selector类可以用文本直接构造，用于xpath解析</span><br><span class="line">&gt;&gt;&gt; from scrapy.selector import Selector</span><br><span class="line">&gt;&gt;&gt; body &#x3D; &#39;&lt;html&gt;&lt;body&gt;&lt;span&gt;good&lt;&#x2F;span&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&#39;</span><br><span class="line">&gt;&gt;&gt; Selector(text&#x3D;body).xpath(&#39;&#x2F;&#x2F;span&#x2F;text()&#39;).get()</span><br><span class="line">&#39;good&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.css(&#39;.shout&#39;).xpath(&#39;.&#x2F;time&#x2F;@datetime&#39;).getall()  # xpath的&#39;.&#39;点号必须加上</span><br></pre></td></tr></table></figure><h5 id="scrapy-shell"><a href="#scrapy-shell" class="headerlink" title="scrapy shell"></a>scrapy shell</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(url[, redirect=<span class="literal">True</span>])   <span class="comment">#  Fetch URL and update local objects</span></span><br><span class="line">fetch(req)                    <span class="comment">#  Fetch a scrapy.Request and update local objects</span></span><br><span class="line">shelp()           <span class="comment"># Shell help (print this help)  很重要，常用，类似于help</span></span><br><span class="line">view(response)    <span class="comment"># View response in a browser</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scrapy.shell.inspect_response的用法如下：便于运行时，检查</span></span><br><span class="line"><span class="keyword">from</span> scrapy.shell <span class="keyword">import</span> inspect_response</span><br><span class="line">inspect_response(response, self)</span><br></pre></td></tr></table></figure><h5 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FormRequest.from_response()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="Scrapy" scheme="http://spiderblog.cn/categories/Scrapy/"/>
    
    
      <category term="Scrapy" scheme="http://spiderblog.cn/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>JS</title>
    <link href="http://spiderblog.cn/JS.html"/>
    <id>http://spiderblog.cn/JS.html</id>
    <published>2020-02-07T15:51:10.000Z</published>
    <updated>2020-02-07T15:52:14.203Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $('#loginPwd')是获取窗口的一个常量</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;JS基础&quot;&gt;&lt;a href=&quot;#JS基础&quot; class=&quot;headerlink&quot; title=&quot;JS基础&quot;&gt;&lt;/a&gt;JS基础&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="JS" scheme="http://spiderblog.cn/categories/JS/"/>
    
    
      <category term="JS" scheme="http://spiderblog.cn/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS-reverse</title>
    <link href="http://spiderblog.cn/JS-reverse.html"/>
    <id>http://spiderblog.cn/JS-reverse.html</id>
    <published>2020-02-07T15:29:28.000Z</published>
    <updated>2020-02-15T03:12:29.581Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getpwd</span>(<span class="params">plaintext</span>)</span>&#123;  <span class="comment">// 一定要先找到明文</span></span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">return</span> ciphertext  <span class="comment">// 返回格式有两种：Hex和base64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常见加密方式"><a href="#常见加密方式" class="headerlink" title="常见加密方式"></a>常见加密方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MD5, SHA <span class="comment"># 不可逆 # 常用</span></span><br><span class="line">HMAC, RC4, </span><br><span class="line">AES, DES, <span class="number">3</span>DES <span class="comment"># 可逆 # 常用</span></span><br><span class="line">Base64, Rabbit, PBKDF2/EvpKDF</span><br><span class="line">RSA</span><br></pre></td></tr></table></figure><h4 id="chrome-F12"><a href="#chrome-F12" class="headerlink" title="chrome-F12"></a>chrome-F12</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">search</span><br><span class="line">sensors <span class="comment"># 设置经纬度</span></span><br><span class="line">下断点</span><br><span class="line">Breakpoints <span class="comment"># 管理断点</span></span><br><span class="line">Call Stack <span class="comment"># 堆栈</span></span><br><span class="line">抓包勾选Preserve log（保存日志），页面跳转，也能保存上一个界面的日志</span><br></pre></td></tr></table></figure><h4 id="工具网站"><a href="#工具网站" class="headerlink" title="工具网站"></a>工具网站</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http://tool.chacuo.net/cryptdes</span><br><span class="line"><span class="comment"># 用来解析公钥（RSA加密），可获取key长度，模数，指数  </span></span><br><span class="line"><span class="comment"># 公钥没有反斜杠'\',只有'/'</span></span><br><span class="line"><span class="comment"># 指数看0x，一般为0x10001,所以就是10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 雷电模拟器 3.63</span></span><br></pre></td></tr></table></figure><h4 id="哈希系列通杀"><a href="#哈希系列通杀" class="headerlink" title="哈希系列通杀"></a>哈希系列通杀</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CryptoJS.MD5('word')</span></span><br><span class="line"><span class="comment"># 哈希加密系列有一个固定值1732584193，可以直接搜索</span></span><br></pre></td></tr></table></figure><h4 id="AES加密"><a href="#AES加密" class="headerlink" title="AES加密"></a>AES加密</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mode <span class="comment"># 类型，常用CBC和ECB</span></span><br><span class="line">padding <span class="comment"># 常用Pkos7和Iso10126</span></span><br><span class="line">IV <span class="comment"># 一般为固定值,要选最初值</span></span><br><span class="line">key <span class="comment"># 一般为固定值</span></span><br><span class="line"><span class="comment"># IV和key都有Eno编码规则，如UTF8</span></span><br></pre></td></tr></table></figure><h4 id="RAS加密"><a href="#RAS加密" class="headerlink" title="RAS加密"></a>RAS加密</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">指数:一般为<span class="number">10001</span></span><br><span class="line">公钥:(很长)要找出来  <span class="comment"># 1.上一个请求的返回值(getpublickey) 2.js文件中默认 3.js代码生成</span></span><br><span class="line"><span class="comment"># B64编码</span></span><br><span class="line"><span class="comment"># PKCS1指的每次生成值不一样</span></span><br><span class="line"><span class="comment"># 内容反转</span></span><br><span class="line"><span class="comment"># 内存反转</span></span><br></pre></td></tr></table></figure><h4 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 小块弹窗，右键检查源码找到目标网址，放入浏览器打开，会出现一个干净的登录界面，方便抓包</span></span><br><span class="line"><span class="comment"># 密码一般为哈希加密</span></span><br><span class="line"><span class="comment"># 遇到Encrypt加断点</span></span><br><span class="line"><span class="comment"># 方法有传参数，就可能是的</span></span><br></pre></td></tr></table></figure><h4 id="JS逆向工具"><a href="#JS逆向工具" class="headerlink" title="JS逆向工具"></a>JS逆向工具</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WT-JS_DEBUG  <span class="comment"># 找安全版本，其他的好像有病毒</span></span><br></pre></td></tr></table></figure><h4 id="JS加密实例"><a href="#JS加密实例" class="headerlink" title="JS加密实例"></a>JS加密实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">中关村登录</span><br><span class="line">pwd: <span class="number">3</span>b8aaa16fa213573513038281774d9c0  <span class="comment"># wuyao666</span></span><br><span class="line"><span class="comment"># pwd : md5Password</span></span><br><span class="line"><span class="comment"># var md5Password = CryptoJS.MD5(password+"zol") + '';</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">今目标登录</span><br><span class="line">password: a2c13e941f4f68fde8d92399ddeb3bf25111a434 <span class="comment"># wuyao666</span></span><br><span class="line"><span class="comment"># var result = &#123;&#125;</span></span><br><span class="line"><span class="comment"># result.password = sha1(resultData.password)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">升学e网通 <span class="comment"># AES</span></span><br><span class="line">password: <span class="string">"590d9a610747ab5392a8a164793516a8"</span> <span class="comment"># wuyao666</span></span><br><span class="line"><span class="comment"># password: i = (0, v.Encrypt)(i)</span></span><br><span class="line">t.Encrypt = function(e) &#123;</span><br><span class="line">            var t = n[<span class="string">"default"</span>].enc.Utf8.parse(e);</span><br><span class="line">            <span class="keyword">return</span> n[<span class="string">"default"</span>].AES.encrypt(t, i, &#123;</span><br><span class="line">                iv: o,</span><br><span class="line">                mode: n[<span class="string">"default"</span>].mode.CBC,</span><br><span class="line">                padding: n[<span class="string">"default"</span>].pad.Pkcs7</span><br><span class="line">            &#125;).ciphertext.toString().toUpperCase()</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment"># o = n["default"].enc.Utf8.parse("2017110912453698")</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">有赞 <span class="comment">// AES # 网站已经改了</span></span><br><span class="line">Fiddler抓包</span><br><span class="line"><span class="comment">// 对password 加密</span></span><br><span class="line">password: d.a.encrypt(e.password)</span><br><span class="line"><span class="comment">// 源码:</span></span><br><span class="line">n = e.enc.Utf8.parse(<span class="string">"youzan.com.aesiv"</span>)</span><br><span class="line">i = e.enc.Utf8.parse("youzan.com._key_")  # i在此处是key</span><br><span class="line"><span class="keyword">var</span> r = e.AES.encrypt(t, i, &#123;</span><br><span class="line">    mode: e.mode.CBC,</span><br><span class="line">    padding: e.pad.Iso10126,</span><br><span class="line">iv: n  <span class="comment">// 这个值很容易混淆,要找初始值，即enc.Utf8.parse()之前的值.</span></span><br><span class="line">&#125;).toString()</span><br><span class="line"><span class="comment">// 对ticket 加密</span></span><br><span class="line">fingerPrint  <span class="comment">// 指纹，其实就是加密后的一个字符串</span></span><br><span class="line">date:&#123;</span><br><span class="line">    fingerPrint: t ? t + c.default.encrypt(r) : <span class="string">""</span>,  <span class="comment">// a?b:c</span></span><br><span class="line">    youzanType: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也是AES加密</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">华特东方注册加密 <span class="comment"># 都是AES</span></span><br><span class="line"><span class="comment"># password </span></span><br><span class="line"><span class="comment"># token</span></span><br><span class="line"><span class="comment"># tokens  #参数unid</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">网页百度登录加密 <span class="comment"># RSA</span></span><br><span class="line"><span class="comment"># token和codestring都是可以固定值的</span></span><br><span class="line"><span class="comment"># gid是随机的，随机数</span></span><br><span class="line"><span class="comment"># password是加密了的RSA,公钥通过请求获取 # password = </span></span><br><span class="line"><span class="comment"># 手机和网页端加密不一样</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">手机百度登录加密 <span class="comment"># RSA</span></span><br><span class="line"><span class="comment"># l.password = window.encryptedString(r,l.password)  # 前面明码经过了拼接</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">运动潮流单品交易平台 <span class="comment"># 拼接+md5</span></span><br><span class="line"><span class="comment"># sign 加密了</span></span><br><span class="line"><span class="comment"># 搜索sign</span></span><br><span class="line"><span class="comment"># t.data.sign || (t.data.sign = Object(I["b"])(t.data))</span></span><br><span class="line"><span class="comment"># t.transformRequest = M : t.params.sign = Object(I["b"])(t.params)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 京东登录 #RSA</span></span><br><span class="line"><span class="comment"># nloginpwd</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 微博 # RSA和SHA1</span></span><br><span class="line">sp  <span class="comment"># e.sp = b;   # sp是密码</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 享物说 # 滑动验证(一般都是假的,提交的请求包,没有这些参数值)</span></span><br><span class="line">模拟器有时候会被识别为<span class="string">"高风险设备:伪造设备"</span>，就不会抓到真的包，需要用自己真的手机来抓包  <span class="comment"># fengkong</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;基本格式&quot;&gt;&lt;a href=&quot;#基本格式&quot; class=&quot;headerlink&quot; title=&quot;基本格式&quot;&gt;&lt;/a&gt;基本格式&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="JS-reverse" scheme="http://spiderblog.cn/categories/JS-reverse/"/>
    
    
      <category term="JS-reverse" scheme="http://spiderblog.cn/tags/JS-reverse/"/>
    
  </entry>
  
  <entry>
    <title>Linux-command</title>
    <link href="http://spiderblog.cn/Linux-command.html"/>
    <id>http://spiderblog.cn/Linux-command.html</id>
    <published>2020-01-28T17:48:56.000Z</published>
    <updated>2020-02-04T07:00:08.358Z</updated>
    
    <content type="html"><![CDATA[<h4 id="port"><a href="#port" class="headerlink" title="port"></a>port</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看占用端口的进程</span></span><br><span class="line">netstat -tlnp|grep <span class="number">6379</span>  <span class="comment"># t-tcp,l-listen,n-不解析(速度快),p-process</span></span><br><span class="line"><span class="comment"># 一次性的清除占用80端口的程序</span></span><br><span class="line">lsof -i :<span class="number">80</span>|grep -v <span class="string">"PID"</span>|awk <span class="string">'&#123;print "kill -9",$2&#125;'</span>|sh</span><br><span class="line"><span class="comment"># 终止进程</span></span><br><span class="line">kill <span class="number">5014</span></span><br><span class="line"><span class="comment"># 强制终止进程</span></span><br><span class="line">kill <span class="number">-9</span> <span class="number">5014</span>  <span class="comment"># 是pid</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;port&quot;&gt;&lt;a href=&quot;#port&quot; class=&quot;headerlink&quot; title=&quot;port&quot;&gt;&lt;/a&gt;port&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Interview-5</title>
    <link href="http://spiderblog.cn/Interview-5.html"/>
    <id>http://spiderblog.cn/Interview-5.html</id>
    <published>2020-01-28T05:33:29.000Z</published>
    <updated>2020-01-29T14:49:45.774Z</updated>
    
    <content type="html"><![CDATA[<h4 id="系统编程"><a href="#系统编程" class="headerlink" title="系统编程"></a>系统编程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进程总结</span></span><br><span class="line"><span class="comment"># 程序运行在操作系统上的一个实例，就称之为进程。</span></span><br><span class="line"><span class="comment"># 进程需要相应的系统资源：内存、时间片、pid</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line">proc = Process(target=func, args=(<span class="number">1</span>,), kwargs=&#123;<span class="string">'a'</span>: <span class="string">'a'</span>&#125;, name=<span class="string">'proc_1'</span>)</span><br><span class="line">proc.start()</span><br><span class="line">proc.is_alive()  <span class="comment"># 是否还活着</span></span><br><span class="line">proc.join(timeout=<span class="number">10</span>)  <span class="comment"># 等结束，或者等10秒</span></span><br><span class="line">proc.terminate()  <span class="comment"># 强制关闭</span></span><br><span class="line">proc.name</span><br><span class="line">proc.pid</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进程之间的通信-Queue  # 只用于本机，不能注册到网络上</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">que = Queue(maxsize=<span class="number">0</span>)  <span class="comment"># 可以指定最大容量</span></span><br><span class="line">que.qsize()  <span class="comment"># 返回当前包含的消息数量</span></span><br><span class="line">que.empty()  <span class="comment"># 为空返回True</span></span><br><span class="line">que.full()   <span class="comment"># 满了返回True</span></span><br><span class="line">que.get(block=<span class="literal">True</span>,timeout=<span class="literal">None</span>)  <span class="comment"># 超时,抛出"Queue.Empty"异常</span></span><br><span class="line">que.put(item,block=<span class="literal">True</span>,timeout=<span class="literal">None</span>)  <span class="comment"># 超时,抛出"Queue.Full"异常</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进程池-Pool</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line">pool = Pool(<span class="number">3</span>)</span><br><span class="line">pool.apply_async(func=func, args=(), kwds=&#123;&#125;, callback=<span class="literal">None</span>, error_callback=<span class="literal">None</span>)</span><br><span class="line">pool.close()   <span class="comment"># 必须关闭</span></span><br><span class="line">pool.join()</span><br><span class="line">pool.terminate()</span><br><span class="line"><span class="comment"># 如果要使用 Pool 创建进程，就需要使用 multiprocessing.Manager()中的 Queue()</span></span><br><span class="line"><span class="comment"># 不能使用multiprocessing.Queue()</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager</span><br><span class="line">q = Manager().Queue()</span><br></pre></td></tr></table></figure><h4 id="你对多进程，多线程，以及协程的理解，项目是否用？"><a href="#你对多进程，多线程，以及协程的理解，项目是否用？" class="headerlink" title="你对多进程，多线程，以及协程的理解，项目是否用？"></a>你对多进程，多线程，以及协程的理解，项目是否用？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进程：一个运行的程序（代码）就是一个进程，没有运行的代码叫程序，进程是系统资源分配的最小单位，进程拥有自己独立的内存空间，所以进程间数据不共享，开销大。</span></span><br><span class="line"><span class="comment"># 线程： 调度执行的最小单位，也叫执行路径，不能独立存在，依赖进程存在一个进程至少有一个线程，叫主线程，而多个线程共享内存(数据共享，共享全局变量)，从而极大地提高了程序的运行效率。</span></span><br><span class="line"><span class="comment"># 协程：是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。 协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</span></span><br></pre></td></tr></table></figure><h4 id="什么是多线程竞争？"><a href="#什么是多线程竞争？" class="headerlink" title="什么是多线程竞争？"></a>什么是多线程竞争？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线程是非独立的，同一个进程里线程是数据共享的，当各个线程访问数据资源时会出现竞争状态即：数据几乎同步会被多个线程占用，造成数据混乱 ，即所谓的线程不安全</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 那么怎么解决多线程竞争问题？-- 锁。</span></span><br><span class="line"><span class="comment"># 锁的好处：确保了某段关键代码(共享数据资源)只能由一个线程从头到尾完整地执行能解决多线程资源竞争下的原子操作问题。</span></span><br><span class="line"><span class="comment"># 锁的坏处：阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了</span></span><br><span class="line"><span class="comment"># 锁的致命问题：死锁。</span></span><br></pre></td></tr></table></figure><h4 id="什么是死锁？"><a href="#什么是死锁？" class="headerlink" title="什么是死锁？"></a>什么是死锁？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若干子线程在系统资源竞争时，都在等待对方对某部分资源解除占用状态，结果是谁也不愿先解锁，互相干等着，程序无法执行下去，这就是死锁。</span></span><br><span class="line"><span class="comment"># GIL锁</span></span><br><span class="line"><span class="comment"># 全局解释器锁（只在 cpython 里才有）</span></span><br><span class="line"><span class="comment"># 作用：限制多线程同时执行，保证同一时间只有一个线程执行，所以 cpython 里的多线程其实是伪多线程!</span></span><br><span class="line"><span class="comment"># 所以 Python 里常常使用协程技术来代替多线程，协程是一种更轻量级的线程</span></span><br><span class="line"><span class="comment"># 进程和线程的切换时由系统决定，而协程由我们程序员自己决定，而模块 gevent 下切换是遇到了耗时操作才会切换。</span></span><br><span class="line"><span class="comment"># 三者的关系：进程里有线程，线程里有协程。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;系统编程&quot;&gt;&lt;a href=&quot;#系统编程&quot; class=&quot;headerlink&quot; title=&quot;系统编程&quot;&gt;&lt;/a&gt;系统编程&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/categories/Interview/"/>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Interview-4</title>
    <link href="http://spiderblog.cn/Interview-4.html"/>
    <id>http://spiderblog.cn/Interview-4.html</id>
    <published>2020-01-28T04:37:40.000Z</published>
    <updated>2020-01-28T05:33:13.229Z</updated>
    
    <content type="html"><![CDATA[<h4 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单案例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls._instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls._instance = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用场景</span></span><br><span class="line"><span class="number">1.</span> 资源共享：日志文件，应用配置</span><br><span class="line"><span class="number">2.</span> 资源控制：应用配置，日志文件，网站计数器，多线程池，数据库配置，数据库连接池</span><br></pre></td></tr></table></figure><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义：在函数内部再定义一个函数，并且这个函数用到了外边函数的变量，那么将这个函数以及用到的一些变量称之为闭包。</span><br></pre></td></tr></table></figure><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于有切面需求的场景</span></span><br><span class="line"><span class="comment"># 插入日志、性能测试、事务处理、缓存、权限的校验等场景</span></span><br><span class="line"><span class="comment"># 有了装饰器就可以抽离出大量的与函数功能本身无关的雷同代码并发并继续使用</span></span><br></pre></td></tr></table></figure><h4 id="Python-中-is-和-的区别？"><a href="#Python-中-is-和-的区别？" class="headerlink" title="Python 中 is 和==的区别？"></a>Python 中 is 和==的区别？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">is</span> 通过id判断</span><br><span class="line">== 通过value判断</span><br></pre></td></tr></table></figure><h4 id="谈谈你对面向对象的理解？"><a href="#谈谈你对面向对象的理解？" class="headerlink" title="谈谈你对面向对象的理解？"></a>谈谈你对面向对象的理解？</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">面向对象是相对于面向过程而言的。面向过程语言是一种基于功能分析的、以算法为中心的程序设计方法；</span><br><span class="line">而面向对象是一种基于结构分析的、以数据为中心的程序设计思想。</span><br><span class="line">在面向对象语言中有一个有很重要东西，叫做类。</span><br><span class="line">面向对象有三大特性：封装、继承、多态。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;单例&quot;&gt;&lt;a href=&quot;#单例&quot; class=&quot;headerlink&quot; title=&quot;单例&quot;&gt;&lt;/a&gt;单例&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/categories/Interview/"/>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Interview-3</title>
    <link href="http://spiderblog.cn/Interview-3.html"/>
    <id>http://spiderblog.cn/Interview-3.html</id>
    <published>2020-01-27T15:06:10.000Z</published>
    <updated>2020-01-27T15:51:33.997Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python-的内存管理机制及调优手段？"><a href="#Python-的内存管理机制及调优手段？" class="headerlink" title="Python 的内存管理机制及调优手段？"></a>Python 的内存管理机制及调优手段？</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内存管理机制：引用计数、垃圾回收、内存池</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.引用计数</span></span><br><span class="line">当一个 Python 对象被引用时，引用计数加<span class="number">1</span>，</span><br><span class="line">当不再被一个变量，减<span class="number">1</span>，</span><br><span class="line">当引用计数等于<span class="number">0</span>时对象被删除。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.垃圾回收</span></span><br><span class="line"><span class="number">2.1</span> 引用计数</span><br><span class="line">当引用计数为<span class="number">0</span>,则被回收 （对循环引用，失效）</span><br><span class="line"><span class="number">2.2</span> 标记清除 </span><br><span class="line">针对循环引用，先将循环引用摘掉，得出有效计数</span><br><span class="line"><span class="number">2.3</span> 分代回收</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 内存池</span></span><br><span class="line">用于管理对小块内存的申请和释放（小于<span class="number">256</span>字节的，直接在内存池申请内存）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">调优手段（了解）</span><br><span class="line"><span class="number">1.</span>手动垃圾回收</span><br><span class="line"><span class="number">2.</span>调高垃圾回收阈值</span><br><span class="line"><span class="number">3.</span>避免循环引用（手动解循环引用和使用弱引用）</span><br></pre></td></tr></table></figure><h3 id="内存泄露是什么？如何避免？"><a href="#内存泄露是什么？如何避免？" class="headerlink" title="内存泄露是什么？如何避免？"></a>内存泄露是什么？如何避免？</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由于设计错误，失去对该段内存的控制，造成内存浪费。</span></span><br><span class="line"><span class="comment"># 有 __del__() 函数的对象间的循环引用是导致内存泄漏的主凶</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 避免</span></span><br><span class="line">不使用一个对象时使用 <span class="keyword">del</span> object 删除一个引用计数</span><br><span class="line">可以通过 sys.getrefcount(obj) 获取对象的引用计数，根据返回值是否为 <span class="number">0</span> 判断是否内存泄漏</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python-的内存管理机制及调优手段？&quot;&gt;&lt;a href=&quot;#Python-的内存管理机制及调优手段？&quot; class=&quot;headerlink&quot; title=&quot;Python 的内存管理机制及调优手段？&quot;&gt;&lt;/a&gt;Python 的内存管理机制及调优手段？&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/categories/Interview/"/>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Interview-2</title>
    <link href="http://spiderblog.cn/Interview-2.html"/>
    <id>http://spiderblog.cn/Interview-2.html</id>
    <published>2020-01-27T14:28:51.000Z</published>
    <updated>2020-02-04T07:17:41.553Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志以文本可以存储在“/var/log/”目录下后缀名为.log</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看服务占用的端口</span></span><br><span class="line">netstat -anp | grep service_name</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep 是查找匹配条件的行</span><br><span class="line">find 是搜索匹配条件的文件（找文件）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux 重定向命令有哪些？有什么区别?</span></span><br><span class="line"><span class="number">1.</span> 重定向&gt;   覆盖</span><br><span class="line"><span class="number">2.</span> 重定向&gt;&gt;  追加</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10 个常用的 Linux 命令</span></span><br><span class="line">pwd 显示工作路径</span><br><span class="line">ls 查看目录中的文件</span><br><span class="line">rm -f file1   <span class="comment"># 删文件 -f 不给提示</span></span><br><span class="line">rmdir dir1    <span class="comment"># 删目录</span></span><br><span class="line">groupadd group_name <span class="comment"># 创建一个新用户组</span></span><br><span class="line">groupdel group_name <span class="comment"># 删除一个用户组</span></span><br><span class="line">tar -cvf archive.tar file1 file2 dir1  <span class="comment"># 创建一个非压缩的 tar包</span></span><br><span class="line">tar -tf archive.tar <span class="comment"># 显示一个包中的内容</span></span><br><span class="line">tar -xvf archive.tar -C /tmp <span class="comment"># 解压压缩包到/tmp目录下</span></span><br><span class="line"><span class="comment"># -c 压缩 -x 解压 -v 显示所有过程 -f 压缩包名字</span></span><br><span class="line">tar -cvfj archive.tar.bz2 dir1  <span class="comment"># 创建一个 bzip2 格式的压缩包</span></span><br><span class="line">tar -xvfj archive.tar.bz2       <span class="comment"># 解压一个 bzip2 格式的压缩包</span></span><br><span class="line">tar -cvfz archive.tar.gz dir1   <span class="comment"># 创建一个 gzip 格式的压缩包</span></span><br><span class="line">tar -xvfz archive.tar.gz        <span class="comment"># 解压一个 gzip 格式的压缩包</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关机</span></span><br><span class="line">reboot  <span class="comment"># 重启</span></span><br><span class="line">shutdown –r now  <span class="comment"># 重启，会给其他用户提示</span></span><br><span class="line">shutdown -h <span class="number">20</span>:<span class="number">25</span>   <span class="comment">#  定时关机</span></span><br><span class="line">shutdown -h +<span class="number">10</span>  <span class="comment"># 十分钟后关机</span></span><br><span class="line">init <span class="number">0</span>  <span class="comment"># 关机</span></span><br><span class="line">init <span class="number">6</span>  <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
    
      <category term="Interview" scheme="http://spiderblog.cn/categories/Interview/"/>
    
    
      <category term="Linux" scheme="http://spiderblog.cn/tags/Linux/"/>
    
      <category term="Interview" scheme="http://spiderblog.cn/tags/Interview/"/>
    
  </entry>
  
</feed>
